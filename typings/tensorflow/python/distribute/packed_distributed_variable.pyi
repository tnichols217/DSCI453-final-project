"""
This type stub file was generated by pyright.
"""

from tensorflow.python.framework import ops
from tensorflow.python.ops import resource_variable_ops

"""A variable which packs a list of variables distributed across devices."""
class PackedDistributedVariable(resource_variable_ops.BaseResourceVariable):
  """A variable which packs multiple variables distributed across devices.

  It's only supported when eager execution is enabled.
  For op-by-op execution, use an unpacked handle on the current device; for
  function execution, use the packed handle to reduce the overhead of function
  calls.
  """
  def __init__(self, distributed_variables=..., name=..., **unused_kwargs) -> None:
    """Packs a list of variables which are distributed across devices.

    Args:
      distributed_variables: A list of distributed Variables to pack.
      name: Optional name for the variable. Defaults to `'Variable'` and gets
        uniquified automatically.
    """
    ...
  
  @property
  def devices(self): # -> list[Any]:
    ...
  
  def on_device(self, device): # -> PackedVarAndDevice:
    ...
  
  def get_var_on_device(self, device):
    ...
  
  def get_var_on_current_device(self):
    ...
  
  def initial_value(self, device):
    """Returns the Tensor used as the initial value for the variable."""
    ...
  
  @property
  def handle(self): # -> None:
    ...
  
  @property
  def packed_handle(self): # -> None:
    ...
  
  def value(self): # -> Any:
    ...
  
  def is_initialized(self, name=...):
    ...
  
  def assign_sub(self, delta, use_locking=..., name=..., read_value=...):
    ...
  
  def assign_add(self, delta, use_locking=..., name=..., read_value=...):
    ...
  
  def assign(self, value, use_locking=..., name=..., read_value=...):
    ...
  
  def scatter_sub(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_add(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_mul(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_div(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_min(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_max(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_update(self, sparse_delta, use_locking=..., name=...):
    ...
  


class PackedVarAndDevice:
  """Holds a packed distributed variable and a device."""
  def __init__(self, var, device) -> None:
    ...
  
  def __getattr__(self, name): # -> Any:
    ...
  
  def var(self): # -> Any:
    ...
  
  def value(self):
    ...
  
  def read_value(self):
    ...
  
  @property
  def initial_value(self):
    ...
  
  def initialized_value(self):
    ...
  
  @property
  def device(self): # -> Any:
    ...
  
  @property
  def handle(self):
    ...
  
  def on_device_handle(self):
    ...
  
  @property
  def op(self) -> ops.Operation:
    ...
  
  def assign_sub(self, delta, use_locking=..., name=..., read_value=...):
    ...
  
  def assign_add(self, delta, use_locking=..., name=..., read_value=...):
    ...
  
  def assign(self, value, use_locking=..., name=..., read_value=...):
    ...
  
  def scatter_sub(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_add(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_mul(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_div(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_min(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_max(self, sparse_delta, use_locking=..., name=...):
    ...
  
  def scatter_update(self, sparse_delta, use_locking=..., name=...):
    ...
  


