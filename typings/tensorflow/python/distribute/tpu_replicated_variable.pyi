"""
This type stub file was generated by pyright.
"""

from tensorflow.python.ops import variables as variables_lib

"""A Variable class that is replicated to logical cores for model parallelism."""
class TPUReplicatedVariable(variables_lib.Variable):
  """Container for replicated `Variables` that are treated as a single variable.

  This class maintains a list of replicated variables that are stored on
  separate logic TPU devices. TF2XLA bridge accesses these variables as
  if they were a single variable.
  """
  def __init__(self, variables, name=...) -> None:
    """Treats `variables` as a replicated list of `tf.Variable`s.

    Example:

    ```
    variables = [
      tf.Variable(..., shape=(10, 100), dtype=tf.float32),
      tf.Variable(..., shape=(10, 100), dtype=tf.float32),
      tf.Variable(..., shape=(10, 100), dtype=tf.float32),
      tf.Variable(..., shape=(10, 100), dtype=tf.float32),
    ]
    replicated_variable = TPUReplicatedVariable(variables)
    assert replicated_variable.shape.as_list() == [10, 100]
    ```

    Args:
      variables: A list of `ResourceVariable`s that comprise this replicated
        variable. Variables should not be shared between different
        `TPUReplicatedVariable` objects.
      name: String. Name of this container. Defaults to "TPUReplicatedVariable".
    """
    ...
  
  def __iter__(self): # -> Iterator[Any]:
    """Return an iterable for accessing the underlying sharded variables."""
    ...
  
  @property
  def name(self): # -> str:
    """The name of this object. Used for checkpointing."""
    ...
  
  @property
  def dtype(self):
    """The dtype of all `Variable`s in this object."""
    ...
  
  @property
  def is_initialized(self):
    ...
  
  @property
  def trainable(self):
    ...
  
  @property
  def device(self):
    """The device this variable is on."""
    ...
  
  @property
  def constraint(self):
    ...
  
  @property
  def graph(self):
    ...
  
  @property
  def synchronization(self): # -> Literal[VariableSynchronization.NONE]:
    ...
  
  @property
  def aggregation(self): # -> Literal[VariableAggregation.NONE]:
    ...
  
  @property
  def variables(self): # -> list[Any] | Sequence[Any]:
    """The list of `Variables`."""
    ...
  
  @property
  def shape(self):
    ...
  
  @property
  def handle(self): # -> BaseResourceVariable | Any:
    ...
  
  def read_value(self):
    ...
  
  def assign(self, value, use_locking=..., name=..., read_value=...): # -> object | _dispatcher_for_no_op | Operation | None:
    ...
  
  def assign_sub(self, value, use_locking=..., name=..., read_value=...): # -> object | _dispatcher_for_no_op | Operation | None:
    ...
  
  def assign_add(self, value, use_locking=..., name=..., read_value=...): # -> object | _dispatcher_for_no_op | Operation | None:
    ...
  
  def __str__(self) -> str:
    ...
  
  def __repr__(self): # -> str:
    ...
  


