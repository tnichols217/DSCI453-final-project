"""
This type stub file was generated by pyright.
"""

import threading
from tensorflow.python.distribute import distribute_lib

"""Class MirroredStrategy implementing tf.distribute.Strategy."""
def call_for_each_replica(strategy, fn, args=..., kwargs=...): # -> list[list[Any] | Any | tuple[list[Any] | Any | Mapping[Any, Any] | DistributedVariable | CompositeTensor | PerReplica, ...] | Mapping[Any, Any] | DistributedVariable | CompositeTensor | PerReplica] | tuple[list[Any] | Any | Mapping[Any, Any] | DistributedVariable | CompositeTensor | PerReplica, ...] | Mapping[Any, Any] | DistributedVariable | CompositeTensor | PerReplica | None:
  """Call `fn` on each worker devices(replica).

  It's highly recommended to wrap the call to this function inside a
  `tf.function`, otherwise the performance is poor.

  Args:
    strategy: `tf.distribute.Strategy`.
    fn: function to call on each worker devices.
    args: positional arguments to `fn`.
    kwargs: keyword arguments to `fn`.

  Returns:
    Wrapped returned value of `fn` from all replicas.
  """
  ...

_cfer_fn_cache = ...
class _RequestedStop(Exception):
  ...


class _MirroredReplicaThread(threading.Thread):
  """A thread that runs() a function on a device."""
  def __init__(self, dist, coord, replica_id, devices, variable_creator_fn, fn, caching_scope, args, kwargs, thread_local_callables=...) -> None:
    ...
  
  def run(self): # -> None:
    ...
  
  def record_thread_local_summary_state(self): # -> None:
    """Record the thread local summary state in self."""
    ...
  
  def restore_thread_local_summary_state(self): # -> None:
    """Restore thread local summary state from self."""
    ...
  
  def record_thread_local_eager_context_state(self): # -> None:
    ...
  
  def restore_thread_local_eager_context_state(self): # -> None:
    ...
  
  def restore_thread_local_callable(self): # -> None:
    ...
  


class _MirroredReplicaContext(distribute_lib.ReplicaContext):
  """ReplicaContext for synchronized replica."""
  @property
  def devices(self): # -> list[Any]:
    ...
  


