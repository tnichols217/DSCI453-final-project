"""
This type stub file was generated by pyright.
"""

import enum

"""Util of GCE specifics to ingegrate with WorkerPreemptionHandler."""
GCP_METADATA_HEADER = ...
_GCE_METADATA_URL_ENV_VARIABLE = ...
_RESTARTABLE_EXIT_CODE = ...
GRACE_PERIOD_GCE = ...
def gce_exit_fn():
  ...

def default_tpu_exit_fn(): # -> None:
  """Default exit function to run after saving checkpoint for TPUStrategy.

  For TPUStrategy, we want the coordinator to exit after workers are down so
  that restarted coordinator would not connect to workers scheduled to be
  preempted. This function achieves so by attempting to get a key-value store
  from coordination service, which will block until workers are done and then
  returns with error. Then we have the coordinator sys.exit(42) to re-schedule
  the job.
  """
  ...

def request_compute_metadata(path): # -> str | _UrlopenRet:
  """Returns GCE VM compute metadata."""
  ...

def termination_watcher_function_gce(): # -> bool | Any:
  ...

def on_gcp(): # -> bool:
  """Detect whether the current running environment is on GCP."""
  ...

@enum.unique
class PlatformDevice(enum.Enum):
  INTERNAL_CPU = ...
  INTERNAL_GPU = ...
  INTERNAL_TPU = ...
  GCE_GPU = ...
  GCE_TPU = ...
  GCE_CPU = ...
  UNSUPPORTED = ...


def detect_platform(): # -> Literal[PlatformDevice.GCE_GPU, PlatformDevice.GCE_TPU, PlatformDevice.GCE_CPU, PlatformDevice.INTERNAL_GPU, PlatformDevice.INTERNAL_TPU, PlatformDevice.INTERNAL_CPU]:
  """Returns the platform and device information."""
  ...

