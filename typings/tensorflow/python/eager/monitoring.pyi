"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.tf_export import tf_export

"""TensorFlow monitoring APIs."""
_MetricMethod = ...
_counter_methods = ...
_int_gauge_methods = ...
_string_gauge_methods = ...
_bool_gauge_methods = ...
_sampler_methods = ...
class Metric:
  """The base class of metric."""
  __slots__ = ...
  def __init__(self, metric_name, metric_methods, label_length, *args) -> None:
    """Creates a new metric.

    Args:
      metric_name: name of the metric class.
      metric_methods: list of swig metric methods.
      label_length: length of label args.
      *args: the arguments to call create method.
    """
    ...
  
  def __del__(self): # -> None:
    ...
  
  def get_cell(self, *labels):
    """Retrieves the cell."""
    ...
  


class CounterCell:
  """CounterCell stores each value of a Counter."""
  __slots__ = ...
  def __init__(self, cell) -> None:
    """Creates a new CounterCell.

    Args:
      cell: A c pointer of TFE_MonitoringCounterCell.
    """
    ...
  
  def increase_by(self, value): # -> None:
    """Atomically increments the value.

    Args:
      value: non-negative value.
    """
    ...
  
  def value(self): # -> int:
    """Retrieves the current value."""
    ...
  


class Counter(Metric):
  """A stateful class for updating a cumulative integer metric.

  This class encapsulates a set of values (or a single value for a label-less
  metric). Each value is identified by a tuple of labels. The class allows the
  user to increment each value.
  """
  __slots__ = ...
  def __init__(self, name, description, *labels) -> None:
    """Creates a new Counter.

    Args:
      name: name of the new metric.
      description: description of the new metric.
      *labels: The label list of the new metric.
    """
    ...
  
  def get_cell(self, *labels): # -> CounterCell:
    """Retrieves the cell."""
    ...
  


class IntGaugeCell:
  """A single integer value stored in an `IntGauge`."""
  __slots__ = ...
  def __init__(self, cell) -> None:
    """Creates a new IntGaugeCell.

    Args:
      cell: A c pointer of TFE_MonitoringIntGaugeCell.
    """
    ...
  
  def set(self, value): # -> None:
    """Atomically set the value.

    Args:
      value: integer value.
    """
    ...
  
  def value(self): # -> int:
    """Retrieves the current value."""
    ...
  


class IntGauge(Metric):
  """A stateful class for updating a gauge-like integer metric.

  This class encapsulates a set of integer values (or a single value for a
  label-less metric). Each value is identified by a tuple of labels. The class
  allows the user to set each value.
  """
  __slots__ = ...
  def __init__(self, name, description, *labels) -> None:
    """Creates a new IntGauge.

    Args:
      name: name of the new metric.
      description: description of the new metric.
      *labels: The label list of the new metric.
    """
    ...
  
  def get_cell(self, *labels): # -> IntGaugeCell:
    """Retrieves the cell."""
    ...
  


class StringGaugeCell:
  """A single string value stored in an `StringGauge`."""
  __slots__ = ...
  def __init__(self, cell) -> None:
    """Creates a new StringGaugeCell.

    Args:
      cell: A c pointer of TFE_MonitoringStringGaugeCell.
    """
    ...
  
  def set(self, value): # -> None:
    """Atomically set the value.

    Args:
      value: string value.
    """
    ...
  
  def value(self):
    """Retrieves the current value."""
    ...
  


class StringGauge(Metric):
  """A stateful class for updating a gauge-like string metric.

  This class encapsulates a set of string values (or a single value for a
  label-less metric). Each value is identified by a tuple of labels. The class
  allows the user to set each value.
  """
  __slots__ = ...
  def __init__(self, name, description, *labels) -> None:
    """Creates a new StringGauge.

    Args:
      name: name of the new metric.
      description: description of the new metric.
      *labels: The label list of the new metric.
    """
    ...
  
  def get_cell(self, *labels): # -> StringGaugeCell:
    """Retrieves the cell."""
    ...
  


class BoolGaugeCell:
  """A single boolean value stored in an `BoolGauge`."""
  __slots__ = ...
  def __init__(self, cell) -> None:
    """Creates a new BoolGaugeCell.

    Args:
      cell: A c pointer of TFE_MonitoringBoolGaugeCell.
    """
    ...
  
  def set(self, value): # -> None:
    """Atomically set the value.

    Args:
      value: bool value.
    """
    ...
  
  def value(self): # -> bool:
    """Retrieves the current value."""
    ...
  


@tf_export("__internal__.monitoring.BoolGauge", v1=[])
class BoolGauge(Metric):
  """A stateful class for updating a gauge-like bool metric.

  This class encapsulates a set of boolean values (or a single value for a
  label-less metric). Each value is identified by a tuple of labels. The class
  allows the user to set each value.
  """
  __slots__ = ...
  def __init__(self, name, description, *labels) -> None:
    """Creates a new BoolGauge.

    Args:
      name: name of the new metric.
      description: description of the new metric.
      *labels: The label list of the new metric.
    """
    ...
  
  def get_cell(self, *labels): # -> BoolGaugeCell:
    """Retrieves the cell."""
    ...
  


class SamplerCell:
  """SamplerCell stores each value of a Sampler."""
  __slots__ = ...
  def __init__(self, cell) -> None:
    """Creates a new SamplerCell.

    Args:
      cell: A c pointer of TFE_MonitoringSamplerCell.
    """
    ...
  
  def add(self, value): # -> None:
    """Atomically add a sample.

    Args:
      value: float value.
    """
    ...
  
  def value(self):
    """Retrieves the current distribution of samples.

    Returns:
      A HistogramProto describing the distribution of samples.
    """
    ...
  


class Buckets:
  """Bucketing strategies for the samplers."""
  __slots__ = ...
  def __init__(self, buckets) -> None:
    """Creates a new Buckets.

    Args:
      buckets: A c pointer of TFE_MonitoringBuckets.
    """
    ...
  
  def __del__(self): # -> None:
    ...
  


class ExponentialBuckets(Buckets):
  """Exponential bucketing strategy.

  Sets up buckets of the form:
      [-DBL_MAX, ..., scale * growth^i,
       scale * growth_factor^(i + 1), ..., DBL_MAX].
  """
  __slots__ = ...
  def __init__(self, scale, growth_factor, bucket_count) -> None:
    """Creates a new exponential Buckets.

    Args:
      scale: float
      growth_factor: float
      bucket_count: integer
    """
    ...
  


class Sampler(Metric):
  """A stateful class for updating a cumulative histogram metric.

  This class encapsulates a set of histograms (or a single histogram for a
  label-less metric) configured with a list of increasing bucket boundaries.
  Each histogram is identified by a tuple of labels. The class allows the
  user to add a sample to each histogram value.
  """
  __slots__ = ...
  def __init__(self, name, buckets, description, *labels) -> None:
    """Creates a new Sampler.

    Args:
      name: name of the new metric.
      buckets: bucketing strategy of the new metric.
      description: description of the new metric.
      *labels: The label list of the new metric.
    """
    ...
  
  def get_cell(self, *labels): # -> SamplerCell:
    """Retrieves the cell."""
    ...
  


MonitoredTimerSections = ...
class MonitoredTimer:
  """A context manager to measure the walltime and increment a Counter cell."""
  __slots__ = ...
  def __init__(self, cell, monitored_section_name=..., avoid_repetitive_counting=...) -> None:
    """Creates a new MonitoredTimer.

    Args:
      cell: the cell associated with the time metric that will be inremented.
      monitored_section_name: name of action being monitored here.
      avoid_repetitive_counting: when set to True, if already in a monitored
        timer section with the same monitored_section_name, skip counting.
    """
    ...
  
  def __enter__(self): # -> Self:
    ...
  
  def __exit__(self, exception_type, exception_value, traceback): # -> None:
    ...
  


def monitored_timer(cell): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
  """A function decorator for adding MonitoredTimer support.

  Args:
    cell: the cell associated with the time metric that will be inremented.
  Returns:
    A decorator that measure the function runtime and increment the specified
    counter cell.
  """
  ...

