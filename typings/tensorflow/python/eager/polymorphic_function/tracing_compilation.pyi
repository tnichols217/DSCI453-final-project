"""
This type stub file was generated by pyright.
"""

import dataclasses
import enum
import threading
from typing import Any, Callable, Dict, Optional, Tuple
from tensorflow.core.function.capture import capture_container
from tensorflow.core.function.polymorphism import function_cache as function_cache_lib, function_type as function_type_lib

"""Compile Python functions to TF graphs using tracing."""
_graph_building_time_counter = ...
class ScopeType(enum.Enum):
  """Enumerate scopes under which functions might be traced."""
  NO_SCOPE = ...
  VARIABLE_CREATION = ...
  NO_VARIABLE_CREATION = ...


@dataclasses.dataclass
class TracingOptions:
  """Configuration options for tracing."""
  python_function: Callable[[Any], Any] = ...
  name: str = ...
  polymorphic_type: Optional[function_type_lib.FunctionType] = ...
  default_values: Optional[Dict[str, Any]] = ...
  scope_type: ScopeType = ...
  attributes: Optional[Dict[str, Any]] = ...
  autograph: bool = ...
  autograph_options: Optional[Tuple[Any, ...]] = ...
  reduce_retracing: bool = ...
  bind_graph_to_function: bool = ...
  function_cache: Optional[function_cache_lib.FunctionCache] = ...
  function_captures: Optional[capture_container.FunctionCaptures] = ...
  lock: Optional[threading.Lock] = ...
  def __post_init__(self): # -> None:
    ...
  
  @property
  def is_pure(self): # -> Dict[str, Any] | bool | None:
    ...
  
  @property
  def input_signature(self):
    ...
  


def call_function(args=..., kwargs=..., tracing_options=...):
  """Traces a function for args and kwargs and calls it after."""
  ...

def trace_function(args=..., kwargs=..., tracing_options=...):
  """Returns a `ConcreteFunction` specialized to inputs and execution context.

  Compiles a Graph corresponding to the Python function logic and uses that
  to generate a differentiable ConcreteFunction.

  Args:
    args: inputs to specialize on. Can be concrete values (e.g. 1) or
      `tf.Tensor` or `tf.TensorSpec`.
    kwargs: keyword inputs to specialize on. Concrete values (e.g. 1) or
      `tf.Tensor` or `tf.TensorSpec`.
    tracing_options: TracingOptions for the tracing process.
  """
  ...

