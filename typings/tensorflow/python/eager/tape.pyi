"""
This type stub file was generated by pyright.
"""

"""Gradient tape utilities."""
class Tape:
  """Represents a gradient propagation trace."""
  __slots__ = ...
  def __init__(self, tape) -> None:
    ...
  
  def watched_variables(self): # -> object:
    ...
  


def push_new_tape(persistent=..., watch_accessed_variables=...): # -> Tape:
  """Pushes a new tape onto the tape stack."""
  ...

def push_tape(tape): # -> None:
  """Pushes an existing tape onto the tape stack."""
  ...

def watch(tape, tensor): # -> None:
  """Marks this tensor to be watched by the given tape."""
  ...

def default_get_variables(variable): # -> list[Any]:
  ...

_variables_override = ...
def register_watched_variable_resolver(resolver): # -> None:
  """Registers the resolver to be used to get the list of variables to watch.

  Args:
    resolver: callable, takes a Variable and returns a list of Variables that
      shall be watched.
  """
  ...

def watch_variable(tape, variable): # -> None:
  """Marks this variable to be watched by the given tape."""
  ...

def variable_accessed(variable): # -> None:
  """Notifies all tapes in the stack that a variable has been accessed.

  Args:
    variable: variable to be watched.
  """
  ...

def variables_accessed(variables): # -> None:
  """Notifies all tapes in the stack that variables have been accessed.

  Only trainable variables are marked as accessed.

  Args:
    variables: iterable of variables to mark as accessed.
  """
  ...

def pop_tape(tape): # -> None:
  """Pops the given tape in the stack."""
  ...

