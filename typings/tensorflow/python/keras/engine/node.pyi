"""
This type stub file was generated by pyright.
"""

import collections

"""Contains the `Node` class."""
_CONSTANT_VALUE = ...
class Node:
  """A `Node` describes the connectivity between two layers.

  Each time a layer is connected to some new input,
  a node is added to `layer._inbound_nodes`.
  Each time the output of a layer is used by another layer,
  a node is added to `layer._outbound_nodes`.

  Args:
      layer: The Layer for the Layer.__call__ this node represents.
      call_args: The positional arguments the Layer was called with.
      call_kwargs: The keyword arguments the Layer was called with.
      outputs: The outputs of the Layer.__call__
  """
  def __init__(self, layer, call_args=..., call_kwargs=..., outputs=...) -> None:
    ...
  
  @property
  def keras_inputs(self): # -> list[Any]:
    """Tensors input to this node that can be traced back to a `keras.Input`."""
    ...
  
  @property
  def parent_nodes(self): # -> list[Any]:
    """Returns all the `Node`s whose output this node immediately depends on."""
    ...
  
  def iterate_inbound(self): # -> Generator[tuple[Any, Any, Any, Any], Any, None]:
    """Yields tuples representing the data inbound from other nodes.

    Yields:
      tuples like: (inbound_layer, node_index, tensor_index, tensor).
    """
    ...
  
  def map_arguments(self, tensor_dict): # -> tuple[tuple[Any], dict[Any, Any]] | tuple[Any, Any]:
    """Maps Keras Tensors to computed Tensors using `tensor_dict`."""
    ...
  
  def serialize(self, make_node_key, node_conversion_map): # -> ListWrapper | defaultdict[Any, Any] | Any | list[Any] | None:
    """Serializes `Node` for Functional API's `get_config`."""
    ...
  
  @property
  def input_tensors(self): # -> list[Any | defaultdict[Any, Any] | list[Any] | object | None] | Any:
    ...
  
  @property
  def output_tensors(self): # -> list[Any | defaultdict[Any, Any] | list[Any] | object | None] | defaultdict[Any, Any] | Any | list[Any] | object | None:
    ...
  
  @property
  def input_shapes(self): # -> Any | defaultdict[Any, Any] | list[Any] | object | None:
    ...
  
  @property
  def output_shapes(self): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
    ...
  
  @property
  def outbound_layer(self): # -> Any:
    ...
  
  @property
  def inbound_layers(self): # -> list[Any] | defaultdict[Any, Any] | Any | object | None:
    ...
  


class KerasHistory(collections.namedtuple('KerasHistory', ['layer', 'node_index', 'tensor_index'])):
  """Tracks the Layer call that created a Tensor, for Keras Graph Networks.

  During construction of Keras Graph Networks, this metadata is added to
  each Tensor produced as the output of a Layer, starting with an
  `InputLayer`. This allows Keras to track how each Tensor was produced, and
  this information is later retraced by the `keras.engine.Network` class to
  reconstruct the Keras Graph Network.

  Attributes:
    layer: The Layer that produced the Tensor.
    node_index: The specific call to the Layer that produced this Tensor. Layers
      can be called multiple times in order to share weights. A new node is
      created every time a Layer is called.
    tensor_index: The output index for this Tensor. Always zero if the Layer
      that produced this Tensor only has one output. Nested structures of
      Tensors are deterministically assigned an index via `nest.flatten`.
  """
  __slots__ = ...


def is_keras_tensor(obj): # -> bool:
  ...

