"""
This type stub file was generated by pyright.
"""

from tensorflow.python import tf2
from tensorflow.python.keras.engine.input_layer import Input, InputLayer
from tensorflow.python.keras.engine.input_spec import InputSpec
from tensorflow.python.keras.engine.base_layer import Layer
from tensorflow.python.keras.engine.base_preprocessing_layer import PreprocessingLayer
from tensorflow.python.keras.layers.advanced_activations import ELU, LeakyReLU, PReLU, ReLU, Softmax, ThresholdedReLU
from tensorflow.python.keras.layers.convolutional import Conv1D, Conv1DTranspose, Conv2D, Conv2DTranspose, Conv3D, Conv3DTranspose, Convolution1D, Convolution2D, Convolution2DTranspose, Convolution3D, Convolution3DTranspose, Cropping1D, Cropping2D, Cropping3D, DepthwiseConv2D, SeparableConv1D, SeparableConv2D, SeparableConvolution1D, SeparableConvolution2D, UpSampling1D, UpSampling2D, UpSampling3D, ZeroPadding1D, ZeroPadding2D, ZeroPadding3D
from tensorflow.python.keras.layers.core import Activation, ActivityRegularization, Dense, Dropout, Flatten, Lambda, Masking, Permute, RepeatVector, Reshape, SpatialDropout1D, SpatialDropout2D, SpatialDropout3D
from tensorflow.python.keras.layers.dense_attention import AdditiveAttention, Attention
from tensorflow.python.keras.layers.embeddings import Embedding
from tensorflow.python.keras.layers.merge import Add, Average, Concatenate, Dot, Maximum, Minimum, Multiply, Subtract, add, average, concatenate, dot, maximum, minimum, multiply, subtract
from tensorflow.python.keras.layers.pooling import AveragePooling1D, AveragePooling2D, AveragePooling3D, AvgPool1D, AvgPool2D, AvgPool3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalAveragePooling3D, GlobalAvgPool1D, GlobalAvgPool2D, GlobalAvgPool3D, GlobalMaxPool1D, GlobalMaxPool2D, GlobalMaxPool3D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalMaxPooling3D, MaxPool1D, MaxPool2D, MaxPool3D, MaxPooling1D, MaxPooling2D, MaxPooling3D
from tensorflow.python.keras.layers.recurrent import AbstractRNNCell, GRU as GRUV1, GRUCell as GRUCellV1, LSTM as LSTMV1, LSTMCell as LSTMCellV1, PeepholeLSTMCell, RNN, SimpleRNN, SimpleRNNCell, StackedRNNCells
from tensorflow.python.keras.layers.convolutional_recurrent import ConvLSTM2D
from tensorflow.python.keras.layers.rnn_cell_wrapper_v2 import DeviceWrapper, DropoutWrapper, ResidualWrapper
from tensorflow.python.keras.layers import serialization
from tensorflow.python.keras.layers.serialization import deserialize, serialize

"""Keras layers API."""
if tf2.enabled():
  ...
else:
  GRUV1 = ...
  GRUCellV1 = ...
  LSTMV1 = ...
  LSTMCellV1 = ...
class VersionAwareLayers:
  """Utility to be used internally to access layers in a V1/V2-aware fashion.

  When using layers within the Keras codebase, under the constraint that
  e.g. `layers.BatchNormalization` should be the `BatchNormalization` version
  corresponding to the current runtime (TF1 or TF2), do not simply access
  `layers.BatchNormalization` since it would ignore e.g. an early
  `compat.v2.disable_v2_behavior()` call. Instead, use an instance
  of `VersionAwareLayers` (which you can use just like the `layers` module).
  """
  def __getattr__(self, name): # -> Any:
    ...
  


