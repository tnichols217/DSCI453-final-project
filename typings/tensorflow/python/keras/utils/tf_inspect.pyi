"""
This type stub file was generated by pyright.
"""

import inspect as _inspect

"""TFDecorator-aware replacements for the inspect module."""
ArgSpec = ...
if hasattr(_inspect, 'FullArgSpec'):
  FullArgSpec = ...
else:
  FullArgSpec = ...
if hasattr(_inspect, 'getfullargspec'):
  _getfullargspec = ...
else:
  _getargspec = ...
def currentframe(): # -> FrameType:
  """TFDecorator-aware replacement for inspect.currentframe."""
  ...

def getargspec(obj): # -> inspect.FullArgSpec | tensorflow.python.keras.utils.tf_inspect.FullArgSpec:
  """TFDecorator-aware replacement for `inspect.getargspec`.

  Note: `getfullargspec` is recommended as the python 2/3 compatible
  replacement for this function.

  Args:
    obj: A function, partial function, or callable object, possibly decorated.

  Returns:
    The `ArgSpec` that describes the signature of the outermost decorator that
    changes the callable's signature, or the `ArgSpec` that describes
    the object if not decorated.

  Raises:
    ValueError: When callable's signature can not be expressed with
      ArgSpec.
    TypeError: For objects of unsupported types.
  """
  ...

def getfullargspec(obj): # -> inspect.FullArgSpec | tensorflow.python.keras.utils.tf_inspect.FullArgSpec:
  """TFDecorator-aware replacement for `inspect.getfullargspec`.

  This wrapper emulates `inspect.getfullargspec` in[^)]* Python2.

  Args:
    obj: A callable, possibly decorated.

  Returns:
    The `FullArgSpec` that describes the signature of
    the outermost decorator that changes the callable's signature. If the
    callable is not decorated, `inspect.getfullargspec()` will be called
    directly on the callable.
  """
  ...

def getcallargs(*func_and_positional, **named): # -> dict[str, Any]:
  """TFDecorator-aware replacement for inspect.getcallargs.

  Args:
    *func_and_positional: A callable, possibly decorated, followed by any
      positional arguments that would be passed to `func`.
    **named: The named argument dictionary that would be passed to `func`.

  Returns:
    A dictionary mapping `func`'s named arguments to the values they would
    receive if `func(*positional, **named)` were called.

  `getcallargs` will use the argspec from the outermost decorator that provides
  it. If no attached decorators modify argspec, the final unwrapped target's
  argspec will be used.
  """
  ...

def getframeinfo(*args, **kwargs): # -> Traceback:
  ...

def getdoc(object): # -> str | None:
  """TFDecorator-aware replacement for inspect.getdoc.

  Args:
    object: An object, possibly decorated.

  Returns:
    The docstring associated with the object.

  The outermost-decorated object is intended to have the most complete
  documentation, so the decorated parameter is not unwrapped.
  """
  ...

def getfile(object): # -> str:
  """TFDecorator-aware replacement for inspect.getfile."""
  ...

def getmembers(object, predicate=...): # -> _GetMembersReturn[Any]:
  """TFDecorator-aware replacement for inspect.getmembers."""
  ...

def getmodule(object): # -> ModuleType | None:
  """TFDecorator-aware replacement for inspect.getmodule."""
  ...

def getmro(cls): # -> tuple[type, ...]:
  """TFDecorator-aware replacement for inspect.getmro."""
  ...

def getsource(object): # -> str:
  """TFDecorator-aware replacement for inspect.getsource."""
  ...

def getsourcefile(object): # -> str | None:
  """TFDecorator-aware replacement for inspect.getsourcefile."""
  ...

def getsourcelines(object): # -> tuple[list[str], int]:
  """TFDecorator-aware replacement for inspect.getsourcelines."""
  ...

def isbuiltin(object): # -> TypeIs[BuiltinFunctionType]:
  """TFDecorator-aware replacement for inspect.isbuiltin."""
  ...

def isclass(object): # -> TypeIs[type[Any]]:
  """TFDecorator-aware replacement for inspect.isclass."""
  ...

def isfunction(object): # -> TypeIs[FunctionType]:
  """TFDecorator-aware replacement for inspect.isfunction."""
  ...

def isframe(object): # -> TypeIs[FrameType]:
  """TFDecorator-aware replacement for inspect.ismodule."""
  ...

def isgenerator(object): # -> TypeIs[GeneratorType[Any, Any, Any]]:
  """TFDecorator-aware replacement for inspect.isgenerator."""
  ...

def isgeneratorfunction(object): # -> bool:
  """TFDecorator-aware replacement for inspect.isgeneratorfunction."""
  ...

def ismethod(object): # -> TypeIs[MethodType]:
  """TFDecorator-aware replacement for inspect.ismethod."""
  ...

def ismodule(object): # -> TypeIs[ModuleType]:
  """TFDecorator-aware replacement for inspect.ismodule."""
  ...

def isroutine(object): # -> TypeIs[FunctionType | MethodType | BuiltinFunctionType | WrapperDescriptorType | MethodDescriptorType | ClassMethodDescriptorType]:
  """TFDecorator-aware replacement for inspect.isroutine."""
  ...

def stack(context=...): # -> list[FrameInfo]:
  """TFDecorator-aware replacement for inspect.stack."""
  ...

