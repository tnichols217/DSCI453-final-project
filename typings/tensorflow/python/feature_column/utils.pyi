"""
This type stub file was generated by pyright.
"""

"""Defines functions common to multiple feature column files."""
def sequence_length_from_sparse_tensor(sp_tensor, num_elements=...): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
  """Returns a [batch_size] Tensor with per-example sequence length."""
  ...

def assert_string_or_int(dtype, prefix): # -> None:
  ...

def assert_key_is_string(key): # -> None:
  ...

def check_default_value(shape, default_value, dtype, key): # -> tuple[tuple[tuple[Any, ...] | Any, ...] | Any, ...] | float | tuple[Any | float | tuple[Any | float | tuple[Any, ...], ...], ...] | None:
  """Returns default value as tuple if it's valid, otherwise raises errors.

  This function verifies that `default_value` is compatible with both `shape`
  and `dtype`. If it is not compatible, it raises an error. If it is compatible,
  it casts default_value to a tuple and returns it. `key` is used only
  for error message.

  Args:
    shape: An iterable of integers specifies the shape of the `Tensor`.
    default_value: If a single value is provided, the same value will be applied
      as the default value for every item. If an iterable of values is
      provided, the shape of the `default_value` should be equal to the given
      `shape`.
    dtype: defines the type of values. Default value is `tf.float32`. Must be a
      non-quantized, real integer or floating point type.
    key: Column name, used only for error messages.

  Returns:
    A tuple which will be used as default value.

  Raises:
    TypeError: if `default_value` is an iterable but not compatible with `shape`
    TypeError: if `default_value` is not compatible with `dtype`.
    ValueError: if `dtype` is not convertible to `tf.float32`.
  """
  ...

