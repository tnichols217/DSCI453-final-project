"""
This type stub file was generated by pyright.
"""

from tensorflow.security.fuzzing.py import annotation_types as _atypes
from typing import Any, TypeVar
from typing_extensions import Annotated

"""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
"""
_DenseToDenseSetOperationOutput = ...
TV_DenseToDenseSetOperation_T = TypeVar("TV_DenseToDenseSetOperation_T", _atypes.Int16, _atypes.Int32, _atypes.Int64, _atypes.Int8, _atypes.String, _atypes.UInt16, _atypes.UInt8)
def dense_to_dense_set_operation(set1: Annotated[Any, TV_DenseToDenseSetOperation_T], set2: Annotated[Any, TV_DenseToDenseSetOperation_T], set_operation: str, validate_indices: bool = ..., name=...): # -> DenseToDenseSetOperation:
  r"""Applies set operation along last dimension of 2 `Tensor` inputs.

  See SetOperationOp::SetOperationFromContext for values of `set_operation`.

  Output `result` is a `SparseTensor` represented by `result_indices`,
  `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
  has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
  dimension contains the result of `set_operation` applied to the corresponding
  `[0...n-1]` dimension of `set`.

  Args:
    set1: A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `string`.
      `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set2`.
      Dimension `n` contains values in a set, duplicates are allowed but ignored.
    set2: A `Tensor`. Must have the same type as `set1`.
      `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set1`.
      Dimension `n` contains values in a set, duplicates are allowed but ignored.
    set_operation: A `string`.
    validate_indices: An optional `bool`. Defaults to `True`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (result_indices, result_values, result_shape).

    result_indices: A `Tensor` of type `int64`.
    result_values: A `Tensor`. Has the same type as `set1`.
    result_shape: A `Tensor` of type `int64`.
  """
  ...

DenseToDenseSetOperation = ...
def dense_to_dense_set_operation_eager_fallback(set1: Annotated[Any, TV_DenseToDenseSetOperation_T], set2: Annotated[Any, TV_DenseToDenseSetOperation_T], set_operation: str, validate_indices: bool, name, ctx): # -> DenseToDenseSetOperation:
  ...

_DenseToSparseSetOperationOutput = ...
TV_DenseToSparseSetOperation_T = TypeVar("TV_DenseToSparseSetOperation_T", _atypes.Int16, _atypes.Int32, _atypes.Int64, _atypes.Int8, _atypes.String, _atypes.UInt16, _atypes.UInt8)
def dense_to_sparse_set_operation(set1: Annotated[Any, TV_DenseToSparseSetOperation_T], set2_indices: Annotated[Any, _atypes.Int64], set2_values: Annotated[Any, TV_DenseToSparseSetOperation_T], set2_shape: Annotated[Any, _atypes.Int64], set_operation: str, validate_indices: bool = ..., name=...): # -> DenseToSparseSetOperation:
  r"""Applies set operation along last dimension of `Tensor` and `SparseTensor`.

  See SetOperationOp::SetOperationFromContext for values of `set_operation`.

  Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,
  and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same
  as `set1`. Dimension `n` contains values in a set, duplicates are allowed but
  ignored.

  If `validate_indices` is `True`, this op validates the order and range of `set2`
  indices.

  Output `result` is a `SparseTensor` represented by `result_indices`,
  `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
  has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
  dimension contains the result of `set_operation` applied to the corresponding
  `[0...n-1]` dimension of `set`.

  Args:
    set1: A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `string`.
      `Tensor` with rank `n`. 1st `n-1` dimensions must be the same as `set2`.
      Dimension `n` contains values in a set, duplicates are allowed but ignored.
    set2_indices: A `Tensor` of type `int64`.
      2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
      order.
    set2_values: A `Tensor`. Must have the same type as `set1`.
      1D `Tensor`, values of a `SparseTensor`. Must be in row-major
      order.
    set2_shape: A `Tensor` of type `int64`.
      1D `Tensor`, shape of a `SparseTensor`. `set2_shape[0...n-1]` must
      be the same as the 1st `n-1` dimensions of `set1`, `result_shape[n]` is the
      max set size across `n-1` dimensions.
    set_operation: A `string`.
    validate_indices: An optional `bool`. Defaults to `True`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (result_indices, result_values, result_shape).

    result_indices: A `Tensor` of type `int64`.
    result_values: A `Tensor`. Has the same type as `set1`.
    result_shape: A `Tensor` of type `int64`.
  """
  ...

DenseToSparseSetOperation = ...
def dense_to_sparse_set_operation_eager_fallback(set1: Annotated[Any, TV_DenseToSparseSetOperation_T], set2_indices: Annotated[Any, _atypes.Int64], set2_values: Annotated[Any, TV_DenseToSparseSetOperation_T], set2_shape: Annotated[Any, _atypes.Int64], set_operation: str, validate_indices: bool, name, ctx): # -> DenseToSparseSetOperation:
  ...

TV_SetSize_T = TypeVar("TV_SetSize_T", _atypes.Int16, _atypes.Int32, _atypes.Int64, _atypes.Int8, _atypes.String, _atypes.UInt16, _atypes.UInt8)
def set_size(set_indices: Annotated[Any, _atypes.Int64], set_values: Annotated[Any, TV_SetSize_T], set_shape: Annotated[Any, _atypes.Int64], validate_indices: bool = ..., name=...) -> Annotated[Any, _atypes.Int32]:
  r"""Number of unique elements along last dimension of input `set`.

  Input `set` is a `SparseTensor` represented by `set_indices`, `set_values`,
  and `set_shape`. The last dimension contains values in a set, duplicates are
  allowed but ignored.

  If `validate_indices` is `True`, this op validates the order and range of `set`
  indices. Setting is to `False` while passing invalid arguments results in
  undefined behavior.

  Args:
    set_indices: A `Tensor` of type `int64`.
      2D `Tensor`, indices of a `SparseTensor`.
    set_values: A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `string`.
      1D `Tensor`, values of a `SparseTensor`.
    set_shape: A `Tensor` of type `int64`.
      1D `Tensor`, shape of a `SparseTensor`.
    validate_indices: An optional `bool`. Defaults to `True`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `int32`.
  """
  ...

SetSize = ...
def set_size_eager_fallback(set_indices: Annotated[Any, _atypes.Int64], set_values: Annotated[Any, TV_SetSize_T], set_shape: Annotated[Any, _atypes.Int64], validate_indices: bool, name, ctx) -> Annotated[Any, _atypes.Int32]:
  ...

_SparseToSparseSetOperationOutput = ...
TV_SparseToSparseSetOperation_T = TypeVar("TV_SparseToSparseSetOperation_T", _atypes.Int16, _atypes.Int32, _atypes.Int64, _atypes.Int8, _atypes.String, _atypes.UInt16, _atypes.UInt8)
def sparse_to_sparse_set_operation(set1_indices: Annotated[Any, _atypes.Int64], set1_values: Annotated[Any, TV_SparseToSparseSetOperation_T], set1_shape: Annotated[Any, _atypes.Int64], set2_indices: Annotated[Any, _atypes.Int64], set2_values: Annotated[Any, TV_SparseToSparseSetOperation_T], set2_shape: Annotated[Any, _atypes.Int64], set_operation: str, validate_indices: bool = ..., name=...): # -> SparseToSparseSetOperation:
  r"""Applies set operation along last dimension of 2 `SparseTensor` inputs.

  See SetOperationOp::SetOperationFromContext for values of `set_operation`.

  If `validate_indices` is `True`, `SparseToSparseSetOperation` validates the
  order and range of `set1` and `set2` indices.

  Input `set1` is a `SparseTensor` represented by `set1_indices`, `set1_values`,
  and `set1_shape`. For `set1` ranked `n`, 1st `n-1` dimensions must be the same
  as `set2`. Dimension `n` contains values in a set, duplicates are allowed but
  ignored.

  Input `set2` is a `SparseTensor` represented by `set2_indices`, `set2_values`,
  and `set2_shape`. For `set2` ranked `n`, 1st `n-1` dimensions must be the same
  as `set1`. Dimension `n` contains values in a set, duplicates are allowed but
  ignored.

  If `validate_indices` is `True`, this op validates the order and range of `set1`
  and `set2` indices.

  Output `result` is a `SparseTensor` represented by `result_indices`,
  `result_values`, and `result_shape`. For `set1` and `set2` ranked `n`, this
  has rank `n` and the same 1st `n-1` dimensions as `set1` and `set2`. The `nth`
  dimension contains the result of `set_operation` applied to the corresponding
  `[0...n-1]` dimension of `set`.

  Args:
    set1_indices: A `Tensor` of type `int64`.
      2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
      order.
    set1_values: A `Tensor`. Must be one of the following types: `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `string`.
      1D `Tensor`, values of a `SparseTensor`. Must be in row-major
      order.
    set1_shape: A `Tensor` of type `int64`.
      1D `Tensor`, shape of a `SparseTensor`. `set1_shape[0...n-1]` must
      be the same as `set2_shape[0...n-1]`, `set1_shape[n]` is the
      max set size across `0...n-1` dimensions.
    set2_indices: A `Tensor` of type `int64`.
      2D `Tensor`, indices of a `SparseTensor`. Must be in row-major
      order.
    set2_values: A `Tensor`. Must have the same type as `set1_values`.
      1D `Tensor`, values of a `SparseTensor`. Must be in row-major
      order.
    set2_shape: A `Tensor` of type `int64`.
      1D `Tensor`, shape of a `SparseTensor`. `set2_shape[0...n-1]` must
      be the same as `set1_shape[0...n-1]`, `set2_shape[n]` is the
      max set size across `0...n-1` dimensions.
    set_operation: A `string`.
    validate_indices: An optional `bool`. Defaults to `True`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (result_indices, result_values, result_shape).

    result_indices: A `Tensor` of type `int64`.
    result_values: A `Tensor`. Has the same type as `set1_values`.
    result_shape: A `Tensor` of type `int64`.
  """
  ...

SparseToSparseSetOperation = ...
def sparse_to_sparse_set_operation_eager_fallback(set1_indices: Annotated[Any, _atypes.Int64], set1_values: Annotated[Any, TV_SparseToSparseSetOperation_T], set1_shape: Annotated[Any, _atypes.Int64], set2_indices: Annotated[Any, _atypes.Int64], set2_values: Annotated[Any, TV_SparseToSparseSetOperation_T], set2_shape: Annotated[Any, _atypes.Int64], set_operation: str, validate_indices: bool, name, ctx): # -> SparseToSparseSetOperation:
  ...

