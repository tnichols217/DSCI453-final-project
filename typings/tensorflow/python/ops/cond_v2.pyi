"""
This type stub file was generated by pyright.
"""

from tensorflow.python.ops import control_flow_util_v2 as util

"""cond_v2 and gradient.

This is a version of cond that emits a single If op, as well as the gradient
function for If ops produced by cond_v2. This will eventually replace the
current tf.cond implementation once it reaches feature and performance parity.
"""
_COND = ...
_CASE = ...
def cond_v2(pred, true_fn, false_fn, name=...): # -> defaultdict[Any, Any] | Any | list[Any] | None:
  """Like tf.cond, except emits a single If op."""
  ...

def get_func_graphs(op): # -> tuple[FuncGraph | Any, FuncGraph | Any] | list[FuncGraph | Any]:
  """Returns `FuncGraph`s for the input op branches.

  Args:
    op: The If or Case Operation.

  Returns:
    A tuple of the `FuncGraph`s of the then_branch and else_branch (all branches
    for Case).
  """
  ...

def verify_captures(op_type, branch_graphs): # -> None:
  """Verify that a branch's tensor is not accessed in another branch fn."""
  ...

class _CondGradFuncGraph(util.CondBranchFuncGraph):
  """FuncGraph for the gradient function of the branch of an If op.

  Handles wrapping and unwrapping intermediate values that are captured by the
  gradient computation in optionals.

  Attributes:
    op_needs_rewrite: True if any intermediates were captured, meaning the
      forward If op needs to be written to output the wrapped intermediates.
  """
  def __init__(self, name, forward_graph) -> None:
    ...
  
  @property
  def wrapped_intermediates(self): # -> list[Any]:
    """The optional-wrapped intermediates captured from the forward graph."""
    ...
  
  @property
  def xla_intermediates(self): # -> list[Any]:
    """Raw intermediates captured from the forward graph if XLA is enabled."""
    ...
  


def indexed_case(branch_index, branch_fns, name=..., lower_using_switch_merge=...): # -> defaultdict[Any, Any] | Any | list[Any] | None:
  """Like conv_v2, except emits a Case op instead of an If."""
  ...

