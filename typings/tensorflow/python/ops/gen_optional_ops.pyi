"""
This type stub file was generated by pyright.
"""

from tensorflow.security.fuzzing.py import annotation_types as _atypes
from typing import Any
from typing_extensions import Annotated

"""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
"""
def optional_from_value(components, name=...) -> Annotated[Any, _atypes.Variant]:
  r"""Constructs an Optional variant from a tuple of tensors.

  Args:
    components: A list of `Tensor` objects.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `variant`.
  """
  ...

OptionalFromValue = ...
def optional_from_value_eager_fallback(components, name, ctx) -> Annotated[Any, _atypes.Variant]:
  ...

def optional_get_value(optional: Annotated[Any, _atypes.Variant], output_types, output_shapes, name=...): # -> object | tuple[Any, ...] | list[Any]:
  r"""Returns the value stored in an Optional variant or raises an error if none exists.

  Args:
    optional: A `Tensor` of type `variant`.
    output_types: A list of `tf.DTypes` that has length `>= 1`.
    output_shapes: A list of shapes (each a `tf.TensorShape` or list of `ints`) that has length `>= 1`.
    name: A name for the operation (optional).

  Returns:
    A list of `Tensor` objects of type `output_types`.
  """
  ...

OptionalGetValue = ...
def optional_get_value_eager_fallback(optional: Annotated[Any, _atypes.Variant], output_types, output_shapes, name, ctx): # -> object:
  ...

def optional_has_value(optional: Annotated[Any, _atypes.Variant], name=...) -> Annotated[Any, _atypes.Bool]:
  r"""Returns true if and only if the given Optional variant has a value.

  Args:
    optional: A `Tensor` of type `variant`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `bool`.
  """
  ...

OptionalHasValue = ...
def optional_has_value_eager_fallback(optional: Annotated[Any, _atypes.Variant], name, ctx) -> Annotated[Any, _atypes.Bool]:
  ...

def optional_none(name=...) -> Annotated[Any, _atypes.Variant]:
  r"""Creates an Optional variant with no value.

  Args:
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `variant`.
  """
  ...

OptionalNone = ...
def optional_none_eager_fallback(name, ctx) -> Annotated[Any, _atypes.Variant]:
  ...

