"""
This type stub file was generated by pyright.
"""

from tensorflow.security.fuzzing.py import annotation_types as _atypes
from typing import Any, TypeVar
from typing_extensions import Annotated

"""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
"""
TV_StatelessMultinomial_T = TypeVar("TV_StatelessMultinomial_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half, _atypes.Int16, _atypes.Int32, _atypes.Int64, _atypes.Int8, _atypes.UInt16, _atypes.UInt32, _atypes.UInt64, _atypes.UInt8)
TV_StatelessMultinomial_Tseed = TypeVar("TV_StatelessMultinomial_Tseed", _atypes.Int32, _atypes.Int64)
TV_StatelessMultinomial_output_dtype = TypeVar("TV_StatelessMultinomial_output_dtype", _atypes.Int32, _atypes.Int64)
def stateless_multinomial(logits: Annotated[Any, TV_StatelessMultinomial_T], num_samples: Annotated[Any, _atypes.Int32], seed: Annotated[Any, TV_StatelessMultinomial_Tseed], output_dtype: TV_StatelessMultinomial_output_dtype = ..., name=...) -> Annotated[Any, TV_StatelessMultinomial_output_dtype]:
  r"""Draws samples from a multinomial distribution.

  Args:
    logits: A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.
      2-D Tensor with shape `[batch_size, num_classes]`.  Each slice `[i, :]`
      represents the unnormalized log probabilities for all classes.
    num_samples: A `Tensor` of type `int32`.
      0-D.  Number of independent samples to draw for each row slice.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    output_dtype: An optional `tf.DType` from: `tf.int32, tf.int64`. Defaults to `tf.int64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `output_dtype`.
  """
  ...

StatelessMultinomial = ...
def stateless_multinomial_eager_fallback(logits: Annotated[Any, TV_StatelessMultinomial_T], num_samples: Annotated[Any, _atypes.Int32], seed: Annotated[Any, TV_StatelessMultinomial_Tseed], output_dtype: TV_StatelessMultinomial_output_dtype, name, ctx) -> Annotated[Any, TV_StatelessMultinomial_output_dtype]:
  ...

TV_StatelessParameterizedTruncatedNormal_S = TypeVar("TV_StatelessParameterizedTruncatedNormal_S", _atypes.Int32, _atypes.Int64)
TV_StatelessParameterizedTruncatedNormal_Tseed = TypeVar("TV_StatelessParameterizedTruncatedNormal_Tseed", _atypes.Int32, _atypes.Int64)
TV_StatelessParameterizedTruncatedNormal_dtype = TypeVar("TV_StatelessParameterizedTruncatedNormal_dtype", _atypes.Float32, _atypes.Float64, _atypes.Half)
def stateless_parameterized_truncated_normal(shape: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_S], seed: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_Tseed], means: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], stddevs: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], minvals: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], maxvals: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], name=...) -> Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype]:
  r"""TODO: add doc.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    means: A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`.
      The mean parameter of each batch.
    stddevs: A `Tensor`. Must have the same type as `means`.
      The standard deviation parameter of each batch. Must be greater than 0.
    minvals: A `Tensor`. Must have the same type as `means`.
      The minimum cutoff. May be -infinity.
    maxvals: A `Tensor`. Must have the same type as `means`.
      The maximum cutoff. May be +infinity, and must be more than the minval
      for each batch.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `means`.
  """
  ...

StatelessParameterizedTruncatedNormal = ...
def stateless_parameterized_truncated_normal_eager_fallback(shape: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_S], seed: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_Tseed], means: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], stddevs: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], minvals: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], maxvals: Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype], name, ctx) -> Annotated[Any, TV_StatelessParameterizedTruncatedNormal_dtype]:
  ...

TV_StatelessRandomBinomial_S = TypeVar("TV_StatelessRandomBinomial_S", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomBinomial_Tseed = TypeVar("TV_StatelessRandomBinomial_Tseed", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomBinomial_T = TypeVar("TV_StatelessRandomBinomial_T", _atypes.Float32, _atypes.Float64, _atypes.Half, _atypes.Int32, _atypes.Int64)
TV_StatelessRandomBinomial_dtype = TypeVar("TV_StatelessRandomBinomial_dtype", _atypes.Float32, _atypes.Float64, _atypes.Half, _atypes.Int32, _atypes.Int64)
def stateless_random_binomial(shape: Annotated[Any, TV_StatelessRandomBinomial_S], seed: Annotated[Any, TV_StatelessRandomBinomial_Tseed], counts: Annotated[Any, TV_StatelessRandomBinomial_T], probs: Annotated[Any, TV_StatelessRandomBinomial_T], dtype: TV_StatelessRandomBinomial_dtype = ..., name=...) -> Annotated[Any, TV_StatelessRandomBinomial_dtype]:
  r"""Outputs deterministic pseudorandom random numbers from a binomial distribution.

  Outputs random values from a binomial distribution.

  The outputs are a deterministic function of `shape`, `seed`, `counts`, and `probs`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    counts: A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`, `int32`, `int64`.
      The counts of the binomial distribution. Must be broadcastable with `probs`,
      and broadcastable with the rightmost dimensions of `shape`.
    probs: A `Tensor`. Must have the same type as `counts`.
      The probability of success for the binomial distribution. Must be broadcastable
      with `counts` and broadcastable with the rightmost dimensions of `shape`.
    dtype: An optional `tf.DType` from: `tf.half, tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.
      The type of the output.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `dtype`.
  """
  ...

StatelessRandomBinomial = ...
def stateless_random_binomial_eager_fallback(shape: Annotated[Any, TV_StatelessRandomBinomial_S], seed: Annotated[Any, TV_StatelessRandomBinomial_Tseed], counts: Annotated[Any, TV_StatelessRandomBinomial_T], probs: Annotated[Any, TV_StatelessRandomBinomial_T], dtype: TV_StatelessRandomBinomial_dtype, name, ctx) -> Annotated[Any, TV_StatelessRandomBinomial_dtype]:
  ...

TV_StatelessRandomGammaV2_dtype = TypeVar("TV_StatelessRandomGammaV2_dtype", _atypes.Float32, _atypes.Float64, _atypes.Half)
TV_StatelessRandomGammaV2_T = TypeVar("TV_StatelessRandomGammaV2_T", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomGammaV2_Tseed = TypeVar("TV_StatelessRandomGammaV2_Tseed", _atypes.Int32, _atypes.Int64)
def stateless_random_gamma_v2(shape: Annotated[Any, TV_StatelessRandomGammaV2_T], seed: Annotated[Any, TV_StatelessRandomGammaV2_Tseed], alpha: Annotated[Any, TV_StatelessRandomGammaV2_dtype], name=...) -> Annotated[Any, TV_StatelessRandomGammaV2_dtype]:
  r"""Outputs deterministic pseudorandom random numbers from a gamma distribution.

  Outputs random values from a gamma distribution.

  The outputs are a deterministic function of `shape`, `seed`, and `alpha`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    alpha: A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`.
      The concentration of the gamma distribution. Shape must match the rightmost
      dimensions of `shape`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `alpha`.
  """
  ...

StatelessRandomGammaV2 = ...
def stateless_random_gamma_v2_eager_fallback(shape: Annotated[Any, TV_StatelessRandomGammaV2_T], seed: Annotated[Any, TV_StatelessRandomGammaV2_Tseed], alpha: Annotated[Any, TV_StatelessRandomGammaV2_dtype], name, ctx) -> Annotated[Any, TV_StatelessRandomGammaV2_dtype]:
  ...

TV_StatelessRandomNormal_dtype = TypeVar("TV_StatelessRandomNormal_dtype", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
TV_StatelessRandomNormal_T = TypeVar("TV_StatelessRandomNormal_T", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomNormal_Tseed = TypeVar("TV_StatelessRandomNormal_Tseed", _atypes.Int32, _atypes.Int64)
def stateless_random_normal(shape: Annotated[Any, TV_StatelessRandomNormal_T], seed: Annotated[Any, TV_StatelessRandomNormal_Tseed], dtype: TV_StatelessRandomNormal_dtype = ..., name=...) -> Annotated[Any, TV_StatelessRandomNormal_dtype]:
  r"""Outputs deterministic pseudorandom values from a normal distribution.

  The generated values will have mean 0 and standard deviation 1.

  The outputs are a deterministic function of `shape` and `seed`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    dtype: An optional `tf.DType` from: `tf.half, tf.bfloat16, tf.float32, tf.float64`. Defaults to `tf.float32`.
      The type of the output.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `dtype`.
  """
  ...

StatelessRandomNormal = ...
def stateless_random_normal_eager_fallback(shape: Annotated[Any, TV_StatelessRandomNormal_T], seed: Annotated[Any, TV_StatelessRandomNormal_Tseed], dtype: TV_StatelessRandomNormal_dtype, name, ctx) -> Annotated[Any, TV_StatelessRandomNormal_dtype]:
  ...

TV_StatelessRandomPoisson_Rtype = TypeVar("TV_StatelessRandomPoisson_Rtype", _atypes.Float32, _atypes.Float64, _atypes.Half, _atypes.Int32, _atypes.Int64)
TV_StatelessRandomPoisson_dtype = TypeVar("TV_StatelessRandomPoisson_dtype", _atypes.Float32, _atypes.Float64, _atypes.Half, _atypes.Int32, _atypes.Int64)
TV_StatelessRandomPoisson_T = TypeVar("TV_StatelessRandomPoisson_T", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomPoisson_Tseed = TypeVar("TV_StatelessRandomPoisson_Tseed", _atypes.Int32, _atypes.Int64)
def stateless_random_poisson(shape: Annotated[Any, TV_StatelessRandomPoisson_T], seed: Annotated[Any, TV_StatelessRandomPoisson_Tseed], lam: Annotated[Any, TV_StatelessRandomPoisson_Rtype], dtype: TV_StatelessRandomPoisson_dtype, name=...) -> Annotated[Any, TV_StatelessRandomPoisson_dtype]:
  r"""Outputs deterministic pseudorandom random numbers from a Poisson distribution.

  Outputs random values from a Poisson distribution.

  The outputs are a deterministic function of `shape`, `seed`, and `lam`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    lam: A `Tensor`. Must be one of the following types: `half`, `float32`, `float64`, `int32`, `int64`.
      The rate of the Poisson distribution. Shape must match the rightmost dimensions
      of `shape`.
    dtype: A `tf.DType` from: `tf.half, tf.float32, tf.float64, tf.int32, tf.int64`.
      The type of the output.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `dtype`.
  """
  ...

StatelessRandomPoisson = ...
def stateless_random_poisson_eager_fallback(shape: Annotated[Any, TV_StatelessRandomPoisson_T], seed: Annotated[Any, TV_StatelessRandomPoisson_Tseed], lam: Annotated[Any, TV_StatelessRandomPoisson_Rtype], dtype: TV_StatelessRandomPoisson_dtype, name, ctx) -> Annotated[Any, TV_StatelessRandomPoisson_dtype]:
  ...

TV_StatelessRandomUniform_dtype = TypeVar("TV_StatelessRandomUniform_dtype", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
TV_StatelessRandomUniform_T = TypeVar("TV_StatelessRandomUniform_T", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomUniform_Tseed = TypeVar("TV_StatelessRandomUniform_Tseed", _atypes.Int32, _atypes.Int64)
def stateless_random_uniform(shape: Annotated[Any, TV_StatelessRandomUniform_T], seed: Annotated[Any, TV_StatelessRandomUniform_Tseed], dtype: TV_StatelessRandomUniform_dtype = ..., name=...) -> Annotated[Any, TV_StatelessRandomUniform_dtype]:
  r"""Outputs deterministic pseudorandom random values from a uniform distribution.

  The generated values follow a uniform distribution in the range `[0, 1)`. The
  lower bound 0 is included in the range, while the upper bound 1 is excluded.

  The outputs are a deterministic function of `shape` and `seed`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    dtype: An optional `tf.DType` from: `tf.half, tf.bfloat16, tf.float32, tf.float64`. Defaults to `tf.float32`.
      The type of the output.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `dtype`.
  """
  ...

StatelessRandomUniform = ...
def stateless_random_uniform_eager_fallback(shape: Annotated[Any, TV_StatelessRandomUniform_T], seed: Annotated[Any, TV_StatelessRandomUniform_Tseed], dtype: TV_StatelessRandomUniform_dtype, name, ctx) -> Annotated[Any, TV_StatelessRandomUniform_dtype]:
  ...

TV_StatelessRandomUniformFullInt_dtype = TypeVar("TV_StatelessRandomUniformFullInt_dtype", _atypes.Int32, _atypes.Int64, _atypes.UInt32, _atypes.UInt64)
TV_StatelessRandomUniformFullInt_T = TypeVar("TV_StatelessRandomUniformFullInt_T", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomUniformFullInt_Tseed = TypeVar("TV_StatelessRandomUniformFullInt_Tseed", _atypes.Int32, _atypes.Int64, _atypes.UInt32, _atypes.UInt64)
def stateless_random_uniform_full_int(shape: Annotated[Any, TV_StatelessRandomUniformFullInt_T], seed: Annotated[Any, TV_StatelessRandomUniformFullInt_Tseed], dtype: TV_StatelessRandomUniformFullInt_dtype = ..., name=...) -> Annotated[Any, TV_StatelessRandomUniformFullInt_dtype]:
  r"""Outputs deterministic pseudorandom random integers from a uniform distribution.

  The generated values are uniform integers covering the whole range of `dtype`.

  The outputs are a deterministic function of `shape` and `seed`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`, `uint32`, `uint64`.
      2 seeds (shape [2]).
    dtype: An optional `tf.DType` from: `tf.int32, tf.int64, tf.uint32, tf.uint64`. Defaults to `tf.uint64`.
      The type of the output.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `dtype`.
  """
  ...

StatelessRandomUniformFullInt = ...
def stateless_random_uniform_full_int_eager_fallback(shape: Annotated[Any, TV_StatelessRandomUniformFullInt_T], seed: Annotated[Any, TV_StatelessRandomUniformFullInt_Tseed], dtype: TV_StatelessRandomUniformFullInt_dtype, name, ctx) -> Annotated[Any, TV_StatelessRandomUniformFullInt_dtype]:
  ...

TV_StatelessRandomUniformInt_dtype = TypeVar("TV_StatelessRandomUniformInt_dtype", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomUniformInt_T = TypeVar("TV_StatelessRandomUniformInt_T", _atypes.Int32, _atypes.Int64)
TV_StatelessRandomUniformInt_Tseed = TypeVar("TV_StatelessRandomUniformInt_Tseed", _atypes.Int32, _atypes.Int64)
def stateless_random_uniform_int(shape: Annotated[Any, TV_StatelessRandomUniformInt_T], seed: Annotated[Any, TV_StatelessRandomUniformInt_Tseed], minval: Annotated[Any, TV_StatelessRandomUniformInt_dtype], maxval: Annotated[Any, TV_StatelessRandomUniformInt_dtype], name=...) -> Annotated[Any, TV_StatelessRandomUniformInt_dtype]:
  r"""Outputs deterministic pseudorandom random integers from a uniform distribution.

  The generated values follow a uniform distribution in the range `[minval, maxval)`.

  The outputs are a deterministic function of `shape`, `seed`, `minval`, and `maxval`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    minval: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      Minimum value (inclusive, scalar).
    maxval: A `Tensor`. Must have the same type as `minval`.
      Maximum value (exclusive, scalar).
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `minval`.
  """
  ...

StatelessRandomUniformInt = ...
def stateless_random_uniform_int_eager_fallback(shape: Annotated[Any, TV_StatelessRandomUniformInt_T], seed: Annotated[Any, TV_StatelessRandomUniformInt_Tseed], minval: Annotated[Any, TV_StatelessRandomUniformInt_dtype], maxval: Annotated[Any, TV_StatelessRandomUniformInt_dtype], name, ctx) -> Annotated[Any, TV_StatelessRandomUniformInt_dtype]:
  ...

TV_StatelessTruncatedNormal_dtype = TypeVar("TV_StatelessTruncatedNormal_dtype", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
TV_StatelessTruncatedNormal_T = TypeVar("TV_StatelessTruncatedNormal_T", _atypes.Int32, _atypes.Int64)
TV_StatelessTruncatedNormal_Tseed = TypeVar("TV_StatelessTruncatedNormal_Tseed", _atypes.Int32, _atypes.Int64)
def stateless_truncated_normal(shape: Annotated[Any, TV_StatelessTruncatedNormal_T], seed: Annotated[Any, TV_StatelessTruncatedNormal_Tseed], dtype: TV_StatelessTruncatedNormal_dtype = ..., name=...) -> Annotated[Any, TV_StatelessTruncatedNormal_dtype]:
  r"""Outputs deterministic pseudorandom values from a truncated normal distribution.

  The generated values follow a normal distribution with mean 0 and standard
  deviation 1, except that values whose magnitude is more than 2 standard
  deviations from the mean are dropped and re-picked.

  The outputs are a deterministic function of `shape` and `seed`.

  Args:
    shape: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      The shape of the output tensor.
    seed: A `Tensor`. Must be one of the following types: `int32`, `int64`.
      2 seeds (shape [2]).
    dtype: An optional `tf.DType` from: `tf.half, tf.bfloat16, tf.float32, tf.float64`. Defaults to `tf.float32`.
      The type of the output.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `dtype`.
  """
  ...

StatelessTruncatedNormal = ...
def stateless_truncated_normal_eager_fallback(shape: Annotated[Any, TV_StatelessTruncatedNormal_T], seed: Annotated[Any, TV_StatelessTruncatedNormal_Tseed], dtype: TV_StatelessTruncatedNormal_dtype, name, ctx) -> Annotated[Any, TV_StatelessTruncatedNormal_dtype]:
  ...

