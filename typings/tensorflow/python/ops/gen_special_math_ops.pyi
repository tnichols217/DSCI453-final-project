"""
This type stub file was generated by pyright.
"""

from tensorflow.security.fuzzing.py import annotation_types as _atypes
from typing import Any, TypeVar
from typing_extensions import Annotated

"""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
"""
TV_BesselI0_T = TypeVar("TV_BesselI0_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_i0(x: Annotated[Any, TV_BesselI0_T], name=...) -> Annotated[Any, TV_BesselI0_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselI0 = ...
def bessel_i0_eager_fallback(x: Annotated[Any, TV_BesselI0_T], name, ctx) -> Annotated[Any, TV_BesselI0_T]:
  ...

TV_BesselI0e_T = TypeVar("TV_BesselI0e_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_i0e(x: Annotated[Any, TV_BesselI0e_T], name=...) -> Annotated[Any, TV_BesselI0e_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselI0e = ...
def bessel_i0e_eager_fallback(x: Annotated[Any, TV_BesselI0e_T], name, ctx) -> Annotated[Any, TV_BesselI0e_T]:
  ...

TV_BesselI1_T = TypeVar("TV_BesselI1_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_i1(x: Annotated[Any, TV_BesselI1_T], name=...) -> Annotated[Any, TV_BesselI1_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselI1 = ...
def bessel_i1_eager_fallback(x: Annotated[Any, TV_BesselI1_T], name, ctx) -> Annotated[Any, TV_BesselI1_T]:
  ...

TV_BesselI1e_T = TypeVar("TV_BesselI1e_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_i1e(x: Annotated[Any, TV_BesselI1e_T], name=...) -> Annotated[Any, TV_BesselI1e_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselI1e = ...
def bessel_i1e_eager_fallback(x: Annotated[Any, TV_BesselI1e_T], name, ctx) -> Annotated[Any, TV_BesselI1e_T]:
  ...

TV_BesselJ0_T = TypeVar("TV_BesselJ0_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_j0(x: Annotated[Any, TV_BesselJ0_T], name=...) -> Annotated[Any, TV_BesselJ0_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselJ0 = ...
def bessel_j0_eager_fallback(x: Annotated[Any, TV_BesselJ0_T], name, ctx) -> Annotated[Any, TV_BesselJ0_T]:
  ...

TV_BesselJ1_T = TypeVar("TV_BesselJ1_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_j1(x: Annotated[Any, TV_BesselJ1_T], name=...) -> Annotated[Any, TV_BesselJ1_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselJ1 = ...
def bessel_j1_eager_fallback(x: Annotated[Any, TV_BesselJ1_T], name, ctx) -> Annotated[Any, TV_BesselJ1_T]:
  ...

TV_BesselK0_T = TypeVar("TV_BesselK0_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_k0(x: Annotated[Any, TV_BesselK0_T], name=...) -> Annotated[Any, TV_BesselK0_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselK0 = ...
def bessel_k0_eager_fallback(x: Annotated[Any, TV_BesselK0_T], name, ctx) -> Annotated[Any, TV_BesselK0_T]:
  ...

TV_BesselK0e_T = TypeVar("TV_BesselK0e_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_k0e(x: Annotated[Any, TV_BesselK0e_T], name=...) -> Annotated[Any, TV_BesselK0e_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselK0e = ...
def bessel_k0e_eager_fallback(x: Annotated[Any, TV_BesselK0e_T], name, ctx) -> Annotated[Any, TV_BesselK0e_T]:
  ...

TV_BesselK1_T = TypeVar("TV_BesselK1_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_k1(x: Annotated[Any, TV_BesselK1_T], name=...) -> Annotated[Any, TV_BesselK1_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselK1 = ...
def bessel_k1_eager_fallback(x: Annotated[Any, TV_BesselK1_T], name, ctx) -> Annotated[Any, TV_BesselK1_T]:
  ...

TV_BesselK1e_T = TypeVar("TV_BesselK1e_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_k1e(x: Annotated[Any, TV_BesselK1e_T], name=...) -> Annotated[Any, TV_BesselK1e_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselK1e = ...
def bessel_k1e_eager_fallback(x: Annotated[Any, TV_BesselK1e_T], name, ctx) -> Annotated[Any, TV_BesselK1e_T]:
  ...

TV_BesselY0_T = TypeVar("TV_BesselY0_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_y0(x: Annotated[Any, TV_BesselY0_T], name=...) -> Annotated[Any, TV_BesselY0_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselY0 = ...
def bessel_y0_eager_fallback(x: Annotated[Any, TV_BesselY0_T], name, ctx) -> Annotated[Any, TV_BesselY0_T]:
  ...

TV_BesselY1_T = TypeVar("TV_BesselY1_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def bessel_y1(x: Annotated[Any, TV_BesselY1_T], name=...) -> Annotated[Any, TV_BesselY1_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

BesselY1 = ...
def bessel_y1_eager_fallback(x: Annotated[Any, TV_BesselY1_T], name, ctx) -> Annotated[Any, TV_BesselY1_T]:
  ...

TV_Dawsn_T = TypeVar("TV_Dawsn_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def dawsn(x: Annotated[Any, TV_Dawsn_T], name=...) -> Annotated[Any, TV_Dawsn_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

Dawsn = ...
def dawsn_eager_fallback(x: Annotated[Any, TV_Dawsn_T], name, ctx) -> Annotated[Any, TV_Dawsn_T]:
  ...

TV_Expint_T = TypeVar("TV_Expint_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def expint(x: Annotated[Any, TV_Expint_T], name=...) -> Annotated[Any, TV_Expint_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

Expint = ...
def expint_eager_fallback(x: Annotated[Any, TV_Expint_T], name, ctx) -> Annotated[Any, TV_Expint_T]:
  ...

TV_FresnelCos_T = TypeVar("TV_FresnelCos_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def fresnel_cos(x: Annotated[Any, TV_FresnelCos_T], name=...) -> Annotated[Any, TV_FresnelCos_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

FresnelCos = ...
def fresnel_cos_eager_fallback(x: Annotated[Any, TV_FresnelCos_T], name, ctx) -> Annotated[Any, TV_FresnelCos_T]:
  ...

TV_FresnelSin_T = TypeVar("TV_FresnelSin_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def fresnel_sin(x: Annotated[Any, TV_FresnelSin_T], name=...) -> Annotated[Any, TV_FresnelSin_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

FresnelSin = ...
def fresnel_sin_eager_fallback(x: Annotated[Any, TV_FresnelSin_T], name, ctx) -> Annotated[Any, TV_FresnelSin_T]:
  ...

TV_Spence_T = TypeVar("TV_Spence_T", _atypes.BFloat16, _atypes.Float32, _atypes.Float64, _atypes.Half)
def spence(x: Annotated[Any, TV_Spence_T], name=...) -> Annotated[Any, TV_Spence_T]:
  r"""TODO: add doc.

  Args:
    x: A `Tensor`. Must be one of the following types: `bfloat16`, `half`, `float32`, `float64`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor`. Has the same type as `x`.
  """
  ...

Spence = ...
def spence_eager_fallback(x: Annotated[Any, TV_Spence_T], name, ctx) -> Annotated[Any, TV_Spence_T]:
  ...

