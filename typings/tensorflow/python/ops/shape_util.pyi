"""
This type stub file was generated by pyright.
"""

"""Tensor shape utilities."""
def shape_tensor(shape): # -> SymbolicTensor:
  """Convert to an int32 or int64 tensor, defaulting to int32 if empty."""
  ...

_ENABLE_MAYBE_SET_STATIC_SHAPE = ...
def maybe_set_static_shape(tensor, shape): # -> None:
  """Sets the shape of `tensor` to the `shape`'s constant value, if inferrable.

  This is a temporary workaround to fix shape inference across functional op
  boundaries. E.g.

  ```python
  shape = tf.constant([3])
  @tf.function
  def f():
    u = tf.random_uniform(shape)
    return u
  ```

  If we were to rely solely on C++ shape inference, the shape of `u` inside
  `f` would be unknown because C++ shape inference is not aware of the outer
  graph and all it sees is a Placeholder node when backtracing the captured
  tensor for `shape`. `maybe_set_static_shape` computes the static shape value
  of `shape` by traversing the `FuncGraph` boundaries and sets the correct
  shape.

  A longer term solution would be to fix C++ shape inference.

  Args:
    tensor: A tensor.
    shape: A shape tensor.
  """
  ...

