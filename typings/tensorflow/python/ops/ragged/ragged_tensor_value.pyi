"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util import dispatch
from tensorflow.python.util.tf_export import tf_export

"""Value for RaggedTensor."""
@tf_export(v1=["ragged.RaggedTensorValue"])
@dispatch.register_dispatchable_type
class RaggedTensorValue:
  """Represents the value of a `RaggedTensor`.

  Warning: `RaggedTensorValue` should only be used in graph mode; in
  eager mode, the `tf.RaggedTensor` class contains its value directly.

  See `tf.RaggedTensor` for a description of ragged tensors.
  """
  def __init__(self, values, row_splits) -> None:
    """Creates a `RaggedTensorValue`.

    Args:
      values: A numpy array of any type and shape; or a RaggedTensorValue.
      row_splits: A 1-D int32 or int64 numpy array.
    """
    ...
  
  row_splits = ...
  values = ...
  dtype = ...
  @property
  def flat_values(self): # -> Any:
    """The innermost `values` array for this ragged tensor value."""
    ...
  
  @property
  def nested_row_splits(self): # -> tuple[Any, ...]:
    """The row_splits for all ragged dimensions in this ragged tensor value."""
    ...
  
  @property
  def ragged_rank(self): # -> int:
    """The number of ragged dimensions in this ragged tensor value."""
    ...
  
  @property
  def shape(self): # -> tuple[Any, None] | tuple[Any, None, None]:
    """A tuple indicating the shape of this RaggedTensorValue."""
    ...
  
  def __str__(self) -> str:
    ...
  
  def __repr__(self): # -> str:
    ...
  
  def to_list(self): # -> list[list[Any | str] | str | Any]:
    """Returns this ragged tensor value as a nested Python list."""
    ...
  


