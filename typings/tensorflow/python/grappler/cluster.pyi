"""
This type stub file was generated by pyright.
"""

import contextlib

"""A python interface for Grappler clusters."""
class Cluster:
  """Grappler Clusters."""
  def __init__(self, allow_soft_placement=..., disable_detailed_stats=..., disable_timeline=..., devices=...) -> None:
    """Creates a Cluster.

    Args:
      allow_soft_placement: If True, TF will automatically fix illegal
        placements instead of erroring out if the placement isn't legal.
      disable_detailed_stats: If True, detailed statistics will not be
        available.
      disable_timeline: If True, the timeline information will not be reported.
      devices: A list of devices of type device_properties_pb2.NamedDevice.
        If None, a device list will be created based on the spec of
        the local machine.
    """
    ...
  
  def Shutdown(self): # -> None:
    ...
  
  def __del__(self): # -> None:
    ...
  
  @property
  def tf_cluster(self): # -> Cluster | None:
    ...
  
  def ListDevices(self): # -> list[Any]:
    """Returns a list of available hardware devices."""
    ...
  
  def ListAvailableOps(self): # -> list[str]:
    """Returns a list of all available operations (sorted alphabetically)."""
    ...
  
  def GetSupportedDevices(self, item): # -> dict[str, list[str]]:
    ...
  
  def EstimatePerformance(self, device): # -> float:
    ...
  
  def MeasureCosts(self, item): # -> tuple[list[Any], float, Any]:
    """Returns the cost of running the specified item.

    Args:
      item: The item for which to measure the costs.
    Returns: The triplet op_perfs, runtime, step_stats.
    """
    ...
  
  def DeterminePeakMemoryUsage(self, item): # -> dict[str, tuple[int, list[tuple[str, int, int, int, int]]]]:
    """Returns a snapshot of the peak memory usage.

    Args:
      item: The item for which to measure the costs.
    Returns: A hashtable indexed by device name.
    """
    ...
  


@contextlib.contextmanager
def Provision(allow_soft_placement=..., disable_detailed_stats=..., disable_timeline=..., devices=...): # -> Generator[Cluster, Any, None]:
  ...

