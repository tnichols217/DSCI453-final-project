"""
This type stub file was generated by pyright.
"""

"""Support for wrapping converted functions bodies with auxiliary logic."""
class FunctionScope:
  """Context manager that wraps the body of a converted function.

  This context manager handles various operations related to the scope of a
  function:
    * optional TF name scopes - these name scopes match the name of the
        function, for easy visualization in tensorBoard;
    * optional automatic control dependencies - this adds the same mechanism
        for control dependencies that is used by `@tf.function`; it can be
        optionally enabled when using `tf.autograph.to_graph`;
    * tracking of autograph conversion state (whether it's enabled by the user,
        conversion options;
  """
  def __init__(self, function_name, scope_name, options) -> None:
    ...
  
  def __enter__(self): # -> Self:
    ...
  
  def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
    ...
  
  def ret(self, value, did_return): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
    """Marks a value as returned from the function guarded by the scope."""
    ...
  


def with_function_scope(thunk, scope_name, options):
  """Inline version of the FunctionScope context manager."""
  ...

