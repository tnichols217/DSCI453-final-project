"""
This type stub file was generated by pyright.
"""

import enum

"""AST node annotation support.

Adapted from Tangent.
"""
class NoValue(enum.Enum):
  """Base class for different types of AST annotations."""
  def of(self, node, default=...): # -> Any | object:
    ...
  
  def add_to(self, node, value): # -> None:
    ...
  
  def exists(self, node): # -> bool:
    ...
  
  def __repr__(self): # -> str:
    ...
  


class Basic(NoValue):
  """Container for basic annotation keys.

  The enum values are used strictly for documentation purposes.
  """
  QN = ...
  SKIP_PROCESSING = ...
  INDENT_BLOCK_REMAINDER = ...
  ORIGIN = ...
  DIRECTIVES = ...
  EXTRA_LOOP_TEST = ...


class Static(NoValue):
  """Container for static analysis annotation keys.

  The enum values are used strictly for documentation purposes.
  """
  IS_PARAM = ...
  SCOPE = ...
  ARGS_SCOPE = ...
  COND_SCOPE = ...
  BODY_SCOPE = ...
  ORELSE_SCOPE = ...
  DEFINITIONS = ...
  ORIG_DEFINITIONS = ...
  DEFINED_FNS_IN = ...
  DEFINED_VARS_IN = ...
  LIVE_VARS_OUT = ...
  LIVE_VARS_IN = ...
  TYPES = ...
  CLOSURE_TYPES = ...
  VALUE = ...


FAIL = ...
def keys(node, field_name=...): # -> frozenset[Any]:
  ...

def getanno(node, key, default=..., field_name=...): # -> Any | object:
  ...

def hasanno(node, key, field_name=...): # -> bool:
  ...

def setanno(node, key, value, field_name=...): # -> None:
  ...

def delanno(node, key, field_name=...): # -> None:
  ...

def copyanno(from_node, to_node, key, field_name=...): # -> None:
  ...

def dup(node, copy_map, field_name=...): # -> None:
  """Recursively copies annotations in an AST tree.

  Args:
    node: ast.AST
    copy_map: Dict[Hashable, Hashable], maps a source anno key to a destination
        key. All annotations with the source key will be copied to identical
        annotations with the destination key.
    field_name: str
  """
  ...

