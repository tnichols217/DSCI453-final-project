"""
This type stub file was generated by pyright.
"""

import gast

"""AST conversion templates.

Adapted from Tangent.
"""
class ContextAdjuster(gast.NodeTransformer):
  """Adjusts the ctx field of nodes to ensure consistency.

  This transformer can change the ctx fields of a variable, tuple and other
  AST elements that allow one, based on whether the element is being read or
  written.
  """
  def __init__(self, override_value) -> None:
    ...
  
  def visit(self, node): # -> Any:
    ...
  
  def visit_Attribute(self, node): # -> AST:
    ...
  
  def visit_Tuple(self, node): # -> AST:
    ...
  
  def visit_List(self, node): # -> AST:
    ...
  
  def visit_Name(self, node): # -> AST:
    ...
  
  def visit_Call(self, node): # -> AST:
    ...
  
  def visit_Dict(self, node): # -> AST:
    ...
  
  def visit_Subscript(self, node): # -> AST:
    ...
  
  def visit_comprehension(self, node): # -> AST:
    ...
  
  def visit_Lambda(self, node): # -> AST:
    ...
  


class ReplaceTransformer(gast.NodeTransformer):
  """Replace AST nodes."""
  def __init__(self, replacements) -> None:
    """Create a new ReplaceTransformer.

    Args:
      replacements: A mapping from placeholder names to (lists of) AST nodes
          that these placeholders will be replaced by.
    """
    ...
  
  def visit_Expr(self, node): # -> Expr | Any:
    ...
  
  def visit_keyword(self, node): # -> AST | list[AST] | list[list[Any] | tuple[list[Any] | tuple[Any, ...] | Any | AST, ...] | Any | AST] | tuple[list[Any] | tuple[Any, ...] | Any | AST, ...] | list[Any] | tuple[Any, ...]:
    ...
  
  def visit_FunctionDef(self, node): # -> AST:
    ...
  
  def visit_Attribute(self, node): # -> AST:
    ...
  
  def visit_Name(self, node): # -> Name | list[AST] | list[list[Any] | tuple[list[Any] | tuple[Any, ...] | Any | AST, ...] | Any | AST] | tuple[list[Any] | tuple[Any, ...] | Any | AST, ...] | AST | list[Any] | tuple[Any, ...]:
    ...
  


def replace(template, **replacements): # -> list[Any]:
  """Replaces placeholders in a Python template.

  AST Name and Tuple nodes always receive the context that inferred from
  the template. However, when replacing more complex nodes (that can potentially
  contain Name children), then the caller is responsible for setting the
  appropriate context.

  Args:
    template: A string representing Python code. Any symbol name can be used
        that appears in the template code can be used as placeholder.
    **replacements: A mapping from placeholder names to (lists of) AST nodes
        that these placeholders will be replaced by. String values are also
        supported as a shorthand for AST Name nodes with the respective ID.

  Returns:
    An AST node or list of AST nodes with the replacements made. If the
    template was a function, a list will be returned. If the template was a
    node, the same node will be returned. If the template was a string, an
    AST node will be returned (a `Module` node in the case of a multi-line
    string, an `Expr` node otherwise).

  Raises:
    ValueError: if the arguments are incorrect.
  """
  ...

def replace_as_expression(template, **replacements): # -> Any:
  """Variant of replace that generates expressions, instead of code blocks."""
  ...

