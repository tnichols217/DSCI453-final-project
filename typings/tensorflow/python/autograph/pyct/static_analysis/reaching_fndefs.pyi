"""
This type stub file was generated by pyright.
"""

from tensorflow.python.autograph.pyct import cfg, transformer

"""An analysis that determines the reach of a function definition.

A function definition is said to reach a statement if that function may exist
(and therefore may be called) when that statement executes.
"""
class Definition:
  """Definition objects describe a unique definition of a function."""
  def __init__(self, def_node) -> None:
    ...
  


class _NodeState:
  """Abstraction for the state of the CFG walk for reaching definition analysis.

  This is a value type. Only implements the strictly necessary operators.

  Attributes:
    value: Dict[qual_names.QN, Set[Definition, ...]], the defined symbols and
        their possible definitions
  """
  def __init__(self, init_from=...) -> None:
    ...
  
  def __eq__(self, other) -> bool:
    ...
  
  def __ne__(self, other) -> bool:
    ...
  
  def __or__(self, other): # -> _NodeState:
    ...
  
  def __add__(self, value): # -> _NodeState:
    ...
  
  def __repr__(self): # -> str:
    ...
  


class Analyzer(cfg.GraphVisitor):
  """CFG visitor that determines reaching definitions at statement level."""
  def __init__(self, graph, external_defs) -> None:
    ...
  
  def init_state(self, _): # -> _NodeState:
    ...
  
  def visit_node(self, node):
    ...
  


class TreeAnnotator(transformer.Base):
  """AST visitor that annotates each symbol name with its reaching definitions.

  Simultaneously, the visitor runs the dataflow analysis on each function node,
  accounting for the effect of closures. For example:

    def foo():
      def f():
        pass
      def g():
        # `def f` reaches here
  """
  def __init__(self, source_info, graphs) -> None:
    ...
  
  def visit_FunctionDef(self, node): # -> AST:
    ...
  
  def visit_Lambda(self, node): # -> AST:
    ...
  
  def visit(self, node): # -> AST | list[Any] | tuple[Any, ...] | Any:
    ...
  


def resolve(node, source_info, graphs): # -> AST | list[Any] | tuple[Any, ...] | Any:
  """Resolves reaching definitions for each symbol.

  Args:
    node: ast.AST
    source_info: transformer.SourceInfo
    graphs: Dict[ast.FunctionDef, cfg.Graph]
  Returns:
    ast.AST
  """
  ...

