"""
This type stub file was generated by pyright.
"""

from tensorflow.python.autograph.core import converter

"""Handles function calls, by generating compiled function names and calls.

Note: this transformer does not rename the top level object being converted;
that is the caller's responsibility.

Requires function_scopes.
"""
class _Function:
  no_root = ...
  def __init__(self) -> None:
    ...
  


set_trace_warned = ...
class _ArgTemplateBuilder:
  """Constructs a tuple representing the positional arguments in a call.

  Example (yes, it's legal Python 3):

      f(*args1, b, *args2, c, d)  ->  args1 + (b,) + args2 + (c, d)
  """
  def __init__(self) -> None:
    ...
  
  def add_arg(self, a): # -> None:
    ...
  
  def add_stararg(self, a): # -> None:
    ...
  
  def finalize(self): # -> None:
    ...
  
  def to_ast(self):
    ...
  


class CallTreeTransformer(converter.Base):
  """Transforms the call tree by renaming transformed symbols."""
  def visit_Lambda(self, node): # -> AST:
    ...
  
  def visit_FunctionDef(self, node): # -> FunctionDef:
    ...
  
  def visit_With(self, node): # -> With:
    ...
  
  def visit_Call(self, node): # -> AST | Any:
    ...
  


def transform(node, ctx): # -> AST | list[Any] | tuple[Any, ...] | Any:
  """Transform function call to the compiled counterparts.

  Args:
    node: AST
    ctx: EntityContext
  Returns:
    A tuple (node, new_names):
        node: The transformed AST
        new_names: set(string), containing any newly-generated names
  """
  ...

