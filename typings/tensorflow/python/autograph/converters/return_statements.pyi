"""
This type stub file was generated by pyright.
"""

from tensorflow.python.autograph.core import converter

"""Canonicalizes functions with multiple returns to use just one."""
BODY_DEFINITELY_RETURNS = ...
ORELSE_DEFINITELY_RETURNS = ...
STMT_DEFINITELY_RETURNS = ...
class _RewriteBlock:
  def __init__(self) -> None:
    ...
  


class ConditionalReturnRewriter(converter.Base):
  """Rewrites a pattern where it's unobvious that all paths return a value.

  This rewrite allows avoiding intermediate None return values.

  The following pattern:

      if cond:
        <block 1>
        return
      else:
        <block 2>
      <block 3>

  is converted to:

      if cond:
        <block 1>
        return
      else:
        <block 2>
        <block 3>

  and vice-versa (if the else returns, subsequent statements are moved under the
  if branch).
  """
  def visit_Return(self, node): # -> Return:
    ...
  
  def visit_While(self, node): # -> While:
    ...
  
  def visit_For(self, node): # -> For:
    ...
  
  def visit_With(self, node): # -> With:
    ...
  
  def visit_Try(self, node): # -> Try:
    ...
  
  def visit_ExceptHandler(self, node): # -> ExceptHandler:
    ...
  
  def visit_If(self, node): # -> If:
    ...
  
  def visit_FunctionDef(self, node): # -> FunctionDef:
    ...
  


class _Block:
  def __init__(self) -> None:
    ...
  
  def __repr__(self): # -> str:
    ...
  


class _Function:
  def __init__(self) -> None:
    ...
  
  def __repr__(self): # -> str:
    ...
  


class ReturnStatementsTransformer(converter.Base):
  """Lowers return statements into variables and conditionals.

  Specifically, the following pattern:

      <block 1>
      return val
      <block 2>

  is converted to:

      do_return = False
      retval = None

      <block 1>

      do_return = True
      retval = val

      if not do_return:
        <block 2>

      return retval

  The conversion adjusts loops as well:

      <block 1>
      while cond:
        <block 2>
        return retval

  is converted to:

      <block 1>
      while not do_return and cond:
        <block 2>
        do_return = True
        retval = val
  """
  def __init__(self, ctx, allow_missing_return) -> None:
    ...
  
  def visit_Return(self, node): # -> list[Any]:
    ...
  
  def visit_While(self, node): # -> While:
    ...
  
  def visit_For(self, node): # -> For:
    ...
  
  def visit_With(self, node): # -> With:
    ...
  
  def visit_Try(self, node): # -> Try:
    ...
  
  def visit_ExceptHandler(self, node): # -> ExceptHandler:
    ...
  
  def visit_If(self, node): # -> If:
    ...
  
  def visit_FunctionDef(self, node): # -> FunctionDef:
    ...
  


def transform(node, ctx, default_to_null_return=...): # -> AST | list[Any] | tuple[Any, ...] | Any:
  """Ensure a function has only a single return, at the end."""
  ...

