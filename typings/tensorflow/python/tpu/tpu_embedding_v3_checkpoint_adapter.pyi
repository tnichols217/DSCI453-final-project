"""
This type stub file was generated by pyright.
"""

from typing import Mapping, Optional, Sequence
from tensorflow.core.tpu.kernels import sparse_core_layout_pb2
from tensorflow.python.checkpoint import checkpoint_adapter
from tensorflow.python.framework import tensor
from tensorflow.python.trackable import base as trackable_base

"""Checkpoint adapter for TPUEmbedding."""
class EmbeddingReshardCallback(checkpoint_adapter.ReshardCallback):
  """Reshard callback for embeddings."""
  def __init__(self, object_local_name: str, checkpoint_local_names: Sequence[str], to_shard_layout: Optional[Sequence[sparse_core_layout_pb2.SparseCoreTableLayout]] = ..., to_unshard_layout: Optional[Sequence[sparse_core_layout_pb2.SparseCoreTableLayout]] = ...) -> None:
    """Initializes  Reshard callback.

    Args:
      object_local_name:  The local name of the object being restored.
      checkpoint_local_names: The local names of the checkpoint positions that
        need to be read.
      to_shard_layout: (Optional) Target layouts as specified in the embedding
        being restored.
      to_unshard_layout: (Optional) Layouts as stored in checkpoint being
        restored from.
    """
    ...
  
  def object_name(self) -> str:
    ...
  
  def update_restore_inputs(self, checkpoint_key: str, shape_and_slice_spec: str) -> tuple[Sequence[str], Sequence[str]]:
    ...
  
  def reshard(self, checkpoint_values: tensor.Tensor, shape_and_slice: str) -> tensor.Tensor:
    ...
  


class TpuEmbeddingV3CheckpointAdapter(checkpoint_adapter.AbstractCheckpointAdapter):
  """Adapter for TPU Embedding V3 to handle checkpoint resharding."""
  def __init__(self, layouts: Optional[sparse_core_layout_pb2.SparseCoreTableLayouts] = ...) -> None:
    """An adapter for TPUEmbeddingV3 checkpoints.

    Constructs an adapter for TPUEmbeddingV3 to handle layout changes. between
    checkpoint values and embedding object being restored.

    Args:
     layouts: The target layouts required.
    """
    ...
  
  @classmethod
  def create_from_checkpoint(cls, save_path: str): # -> Self:
    ...
  
  def initialize_reshard_callbacks(self, embedding_layouts: Optional[Mapping[str, sparse_core_layout_pb2.SparseCoreTableLayout]] = ...): # -> None:
    ...
  
  def is_layouts_same(self, embedding_layouts) -> bool:
    """Returns True if the all the embedding and checkpoint layouts are the same.

    Args:
      embedding_layouts: dict of layouts for embedding tables.

    Raises: ValueError if the embedding layouts and checkpoint layouts do not
      have the same keys.
    Returns: Bool representing if the embedding layouts match the layouts in
      checkpoint.
    """
    ...
  
  def is_applicable(self, trackable: trackable_base.Trackable) -> bool:
    ...
  
  def get_reshard_callback(self, name: str) -> Optional[checkpoint_adapter.ReshardCallback]:
    ...
  


