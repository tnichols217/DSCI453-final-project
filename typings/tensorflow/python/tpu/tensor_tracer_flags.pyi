"""
This type stub file was generated by pyright.
"""

"""Utilities to handle tensor tracer parameters."""
TRACE_MODE_PART_TENSOR = ...
TRACE_MODE_FULL_TENSOR = ...
TRACE_MODE_FULL_TENSOR_SUMMARY = ...
TRACE_MODE_NAN_INF = ...
TRACE_MODE_NORM = ...
TRACE_MODE_MAX_ABS = ...
TRACE_MODE_SUMMARY = ...
TRACE_MODE_HISTORY = ...
_SUBMODE_BRIEF = ...
_SUBMODE_DETAILED = ...
_FLAG_SINGLE_QUOTE_PAT = ...
_FLAG_DOUBLE_QUOTE_PAT = ...
_FLAG_NO_QUOTE_PAT = ...
_FLAG_NO_EQUAL_PAT = ...
FLAGS_ENV_VAR = ...
FLAG_NAME_ENABLE = ...
FLAG_NAME_TRACE_MODE = ...
FLAG_NAME_TRACE_SCALAR_OPS = ...
FLAG_NAME_SUBMODE = ...
FLAG_NAME_EXCLUDED_OPNAMES = ...
FLAG_NAME_EXCLUDED_OPTYPES = ...
FLAG_NAME_INCLUDED_OPNAMES = ...
FLAG_NAME_INCLUDED_OPTYPES = ...
FLAG_NAME_TRACE_LEVEL = ...
FLAG_NAME_TRACE_DIR = ...
FLAG_NAME_REPORT_FILE = ...
FLAG_NAME_USE_TEST_UNDECLARED_OUTPUTS_DIR = ...
FLAG_NAME_OP_RANGE = ...
FLAG_NAME_DUMP_BEFORE_AFTER_GRAPHS = ...
FLAG_NAME_SUMMARY_SIGNATURES = ...
FLAG_NAME_SUMMARY_PER_CORE = ...
FLAG_NAME_TEMP_CACHE_VAR = ...
FLAG_NAME_INSPECT_TRACE = ...
FLAG_NAME_FINGERPRINT_DIR = ...
FLAG_FLUSH_SUMMARY = ...
VALID_FLAG_NAMES = ...
_OP_RANGE_PAT = ...
_TEST_UNDECLARED_OUTPUTS_DIR_ENV_VAR = ...
_TT_DEFAULT_TRACE_LEVEL = ...
_TT_PREFIX = ...
_TT_NORM = ...
_TT_MAX = ...
_TT_MAX_ABS = ...
_TT_MIN = ...
_TT_SPARSITY = ...
_TT_MEAN = ...
_TT_VAR = ...
_TT_SIZE = ...
TT_SUMMARY_NORM = ...
TT_SUMMARY_MAX = ...
TT_SUMMARY_MAX_ABS = ...
TT_SUMMARY_MIN = ...
TT_SUMMARY_SPARSITY = ...
TT_SUMMARY_MEAN = ...
TT_SUMMARY_VAR = ...
TT_SUMMARY_SIZE = ...
TT_SUMMARY_SIGNATURES = ...
FLAGS = ...
DELTA_THRESHOLD = ...
TT_CHECK_FILTER = ...
TT_SINGLE_CORE_SUMMARIES = ...
class TTParameters:
  """A class that handles the parameters of Tensor Tracer."""
  def __init__(self, env=...) -> None:
    ...
  
  def is_brief_mode(self): # -> bool | Any:
    ...
  
  @staticmethod
  def match_next_flag(tt_flags, pos): # -> tuple[Match[str], Literal[True]] | tuple[Match[str], Literal[False]] | tuple[None, Literal[False]]:
    """Returns the match for the next TensorTracer flag.

    Args:
       tt_flags: a string that contains the flags.
       pos: where in flags to start the search.

    Returns:
       A pair where the first element is the regular-expression
       match found and the second element indicates if the match
       has a value.
    """
    ...
  
  def get_signature_to_agg_fn_map(self): # -> dict[str, Any]:
    """Returns a map that contains the aggregate function for each signature."""
    ...
  
  def get_flag_value(self, wanted_flag_name): # -> tuple[Literal[False], None] | tuple[Literal[True], str | Any | None]:
    """Returns the value of a TensorTracer flags.

    Args:
      wanted_flag_name: the name of the flag we are looking for.

    Returns:
      A pair where the first element indicates if the flag is
      found and the second element is the value of the flag.

    Raises:
      RuntimeError: If supposedly deadcode is reached.
    """
    ...
  
  def is_flag_on(self, flag_name): # -> bool:
    """Returns True if the given flag is on."""
    ...
  
  def is_enabled(self): # -> bool:
    """Returns True if TensorTracer is enabled."""
    ...
  
  def use_test_undeclared_outputs_dir(self): # -> bool:
    """Decides the output directory of the report and trace files.

    Args:
       None.

    Returns:
       True if the output files should be written to the
       test-undeclared-outputs-directory defined via an
       env variable.
    """
    ...
  


