"""
This type stub file was generated by pyright.
"""

"""Cloud TPU Client."""
_GOOGLE_API_CLIENT_INSTALLED = ...
FLAGS = ...
_GKE_ENV_VARIABLE = ...
_DEFAULT_TPUCONFIG_VARIABLE = ...
_ENDPOINTS_SEPARATOR = ...
_DEFAULT_ENV_VARIABLE = ...
_DISCOVERY_SERVICE_URL_ENV_VARIABLE = ...
_GCE_METADATA_URL_ENV_VARIABLE = ...
_GCE_METADATA_ENDPOINT_ENV_VARIABLE = ...
_DEFAULT_ENDPOINT_PORT = ...
_OOM_EVENT_COOL_TIME_SEC = ...
_VERSION_SWITCHER_ENDPOINT = ...
class Client:
  """Client for working with the Cloud TPU API.

  This client is intended to be used for resolving tpu name to ip addresses.

  It's recommended to use this library as a contextlib to utilize all
  functionality.
  """
  def __init__(self, tpu=..., zone=..., project=..., credentials=..., service=..., discovery_url=...) -> None:
    ...
  
  def __enter__(self): # -> None:
    ...
  
  def __exit__(self, type, value, traceback): # -> None:
    ...
  
  def recoverable(self): # -> bool:
    """Returns true if the TPU is in a state where training should eventually resume.

    If false the TPU is in a unrecoverable state and should be recreated.
    """
    ...
  
  def symptoms(self): # -> None:
    """Return Cloud TPU Symptoms of the TPU."""
    ...
  
  def state(self): # -> None:
    """Return state of the TPU."""
    ...
  
  def health(self): # -> None:
    """Return health of the TPU."""
    ...
  
  def runtime_version(self): # -> Any | None:
    """Return runtime version of the TPU."""
    ...
  
  def accelerator_type(self): # -> None:
    """Return accelerator type of the TPU."""
    ...
  
  def api_available(self): # -> bool:
    """Return if the Cloud TPU API is available, if not certain features will not work."""
    ...
  
  def name(self): # -> str | Any:
    """Return the name of the tpu, or the ip address if name is not provided."""
    ...
  
  def get_local_ip(self): # -> str:
    """Return the local ip address of the Google Cloud VM the workload is running on."""
    ...
  
  def network_endpoints(self): # -> list[dict[str, str | Any]] | list[dict[str, Any]]:
    """Return a list of tpu endpoints."""
    ...
  
  def wait_for_healthy(self, timeout_s=..., interval=...): # -> None:
    """Wait for TPU to become healthy or raise error if timeout reached.

    Args:
      timeout_s (int): The timeout in seconds for waiting TPU to become healthy.
      interval (int): The interval in seconds to poll the TPU for health.

    Raises:
      RuntimeError: If the TPU doesn't become healthy by the timeout.
    """
    ...
  
  def configure_tpu_version(self, version, restart_type=...): # -> None:
    """Configure TPU software version.

    Args:
      version (string): Version of software to configure the TPU with.
      restart_type (string): Restart behaviour when switching versions,
        defaults to always restart. Options are 'always', 'ifNeeded'.

    """
    ...
  


