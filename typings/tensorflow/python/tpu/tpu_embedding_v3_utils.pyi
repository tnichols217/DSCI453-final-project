"""
This type stub file was generated by pyright.
"""

from typing import Dict
from tensorflow.python.framework import tensor
from tensorflow.python.ops import variables as tf_variables
from tensorflow.python.trackable import base as trackable_base

"""Utils for Sparsecore Checkpoints."""
SPARSECORE_LAYOUTS_CHECKPOINT_KEY = ...
def unshuffle_from_sc_to_cpu(t: tensor.Tensor, num_sparse_cores: int, offset_in_shard: int, size_in_shard: int, shard_rotation: int = ...) -> tensor.Tensor:
  """Unshuffles the sparse core sharded embedding tables to unsharded.

  This converts an input tensor respresenting stacked and sharded embedding
  table into a specific embedding table variable by using the provided
  metadata about the said table within the stacked, sharded embedding table.
  Args:
    t: The input stacked and sharded embedding table from sparsecore.
    num_sparse_cores: The number of sparsecores, this determines the number of
      shards that are present in the input t.
    offset_in_shard: Offset within a shard where the queried table starts.
    size_in_shard: size (number of rows) of this queried table within each shard
      of the input t.
    shard_rotation: The rotation of this table's shards.

  Returns:
    An embedding table which is part of the stacked embedding table t.
  """
  ...

def remove_padding_from_sc(value_in_checkpoint: tensor.Tensor, variable_shape: tuple[int, int]) -> tensor.Tensor:
  """Removes padding, if any, from sparsecore checkpoint.

  Args:
    value_in_checkpoint: input tensor value, usually from checkpoint.
    variable_shape: Expected shape of tensor after removing padding.

  Returns:
    A slice of the input tensor to match the variable_shape if the
    variable shape is a valid slice if the input tensor.
  """
  ...

def map_indices_in_shard(num_sparse_cores: int, offset_in_shard: int, shard_rotation: int, row_indices: tensor.Tensor) -> tuple[tensor.Tensor, tensor.Tensor]:
  """Maps a row of a given table to its sparse core shard and position.

  Maps a given a row index of a logical table and its layout in sparse core,
  returns the index of the shard where the row is placed and its relative
  position within
  that sparse core shard.
  Args:
    num_sparse_cores: The number of sparsecores, this determines the number of
      shards present.
    offset_in_shard: Offset within a shard where the queried table starts.
    shard_rotation: The rotation of this table's shards.
    row_indices: row indices of the embedding table being looked up.

  Returns:
    A Tuple representing shard_index and position of the row in that shard.
  """
  ...

class SparseCoreLayoutsTrackable(trackable_base.Trackable):
  """Trackable for sparsecore layouts used in training."""
  def __init__(self, proto_str_tensor: tensor.Tensor) -> None:
    ...
  


class SparseCoreStackedTableTrackable(trackable_base.Trackable):
  """Trackable for stacked tables generated from sparse core."""
  def __init__(self, stacked_layouts, table_to_config) -> None:
    ...
  
  def get_var(self, name: str) -> tf_variables.Variable:
    ...
  
  def get_vars(self) -> Dict[str, tf_variables.Variable]:
    ...
  
  def __repr__(self): # -> str:
    ...
  


