"""
This type stub file was generated by pyright.
"""

"""Utilities for saving/loading Trackable objects asynchronously."""
_END_TIME_OF_LAST_ASYNC_WRITE = ...
_END_TIME_OF_LAST_ASYNC_WRITE_LOCK = ...
_ASYNC_CHECKPOINT = ...
_TPU_EMBEDDING_ATTR = ...
class AsyncCheckpointHelper:
  """Helper class for async checkpoint."""
  def __init__(self, checkpointer_impl, root=..., **kwargs) -> None:
    """Initialize AsyncCheckpoint.

    Args:
      checkpointer_impl: The Checkpoint class to power the AsyncCheckpoint.
      root: The root object to checkpoint. `root` may be a trackable object or
        `WeakRef` of a trackable object.
      **kwargs: The keyword arguments representing the checkpointed variables.

    Raises:
      AttributeError: when checkpointer_impl is None.
    """
    ...
  
  def checkpointer(self):
    """Gets or creates the underlying Checkpoint instance."""
    ...
  
  @property
  def save_counter(self):
    """An integer variable numbering the checkpoint events.

    This is maintained by the underlying tf.train.Checkpoint object employed by
    AsyncCheckpoint class. The number starts at 0 and gets incremented for each
    checkpoint event.

    Returns:
      The save counter variable.
    """
    ...
  
  def write(self, save_path, options=...):
    """Save the checkpointed variables.

    Args:
      save_path: The file prefix of the checkpoint file.
      options: Optional CheckpointOption instance.

    Returns:
      The full path of the checkpoint file.
    """
    ...
  
  def save(self, save_path, options=...): # -> str:
    """Save the checkpointed variables.

    Args:
      save_path: The file prefix of the checkpoint file.
      options: Optional CheckpointOption instance.

    Returns:
      The full path of the checkpoint file.
    """
    ...
  
  def read(self, save_path, options=...):
    """Restore the checkpointed variables.

    This method has exactly the same logic as restore(). This method is
    implemented only to fulfill the duty of subclassing tf.train.Checkpoint.

    Args:
      save_path: The full name of the checkpoint file to be restored.
      options: CheckpointOption instance.

    Returns:
      A load status object, which can be used to make assertions about the
      status of a checkpoint restoration. See tf.train.Checkpoint.restore()
      for more details.
    """
    ...
  
  def restore(self, save_path, options=...):
    """Restore the checkpointed variables.

    Args:
      save_path: The full name of the checkpoint file to be restored.
      options: CheckpointOption instance.

    Returns:
      A load status object, which can be used to make assertions about the
      status of a checkpoint restoration. See tf.train.Checkpoint.restore()
      for more details.
    """
    ...
  
  def sync(self): # -> None:
    """Sync on any ongoing save or restore events."""
    ...
  


