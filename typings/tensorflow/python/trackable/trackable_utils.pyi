"""
This type stub file was generated by pyright.
"""

"""Utility methods for the trackable dependencies."""
def pretty_print_node_path(path): # -> LiteralString | Literal['root object']:
  ...

class CyclicDependencyError(Exception):
  def __init__(self, leftover_dependency_map) -> None:
    """Creates a CyclicDependencyException."""
    ...
  


def order_by_dependency(dependency_map): # -> Iterator[Any]:
  """Topologically sorts the keys of a map so that dependencies appear first.

  Uses Kahn's algorithm:
  https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm

  Args:
    dependency_map: a dict mapping values to a list of dependencies (other keys
      in the map). All keys and dependencies must be hashable types.

  Returns:
    A sorted array of keys from dependency_map.

  Raises:
    CyclicDependencyError: if there is a cycle in the graph.
    ValueError: If there are values in the dependency map that are not keys in
      the map.
  """
  ...

_ESCAPE_CHAR = ...
_OPTIMIZER_SLOTS_NAME = ...
OBJECT_ATTRIBUTES_NAME = ...
SERIALIZE_TO_TENSORS_NAME = ...
def escape_local_name(name):
  ...

def object_path_to_string(node_path_arr): # -> LiteralString:
  """Converts a list of nodes to a string."""
  ...

def checkpoint_key(object_path, local_name): # -> str:
  """Returns the checkpoint key for a local attribute of an object."""
  ...

def extract_object_name(key):
  """Substrings the checkpoint key to the start of "/.ATTRIBUTES"."""
  ...

def extract_local_name(key, prefix=...):
  """Returns the substring after the "/.ATTIBUTES/" in the checkpoint key."""
  ...

def slot_variable_key(variable_path, optimizer_path, slot_name): # -> str:
  """Returns checkpoint key for a slot variable."""
  ...

