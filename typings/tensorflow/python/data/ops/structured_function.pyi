"""
This type stub file was generated by pyright.
"""

"""Utilities for managing tf.data user-defined functions."""
class StructuredFunctionWrapper:
  """A function wrapper that supports structured arguments and return values."""
  def __init__(self, func, transformation_name, dataset=..., input_classes=..., input_shapes=..., input_types=..., input_structure=..., add_to_graph=..., use_legacy_function=..., defun_kwargs=...) -> None:
    """Creates a new `StructuredFunctionWrapper` for the given function.

    Args:
      func: A function from a (nested) structure to another (nested) structure.
      transformation_name: Human-readable name of the transformation in which
        this function is being instantiated, for error messages.
      dataset: (Optional.) A `tf.data.Dataset`. If given, the structure of this
        dataset will be assumed as the structure for `func` arguments; otherwise
        `input_classes`, `input_shapes`, and `input_types` must be defined.
      input_classes: (Optional.) A (nested) structure of `type`. If given, this
        argument defines the Python types for `func` arguments.
      input_shapes: (Optional.) A (nested) structure of `tf.TensorShape`. If
        given, this argument defines the shapes and structure for `func`
        arguments.
      input_types: (Optional.) A (nested) structure of `tf.DType`. If given,
        this argument defines the element types and structure for `func`
        arguments.
      input_structure: (Optional.) A `Structure` object. If given, this argument
        defines the element types and structure for `func` arguments.
      add_to_graph: (Optional.) If `True`, the function will be added to the
        default graph, if it exists.
      use_legacy_function: (Optional.) A boolean that determines whether the
        function be created using `tensorflow.python.eager.function.defun`
        (default behavior) or `tensorflow.python.framework.function.Defun`
        (legacy behavior).
      defun_kwargs: (Optional.) A dictionary mapping string argument names to
        values. If supplied, will be passed to `function` as keyword arguments.

    Raises:
      ValueError: If an invalid combination of `dataset`, `input_classes`,
        `input_shapes`, and `input_types` is passed.
    """
    ...
  
  @property
  def output_structure(self):
    ...
  
  @property
  def output_classes(self): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
    ...
  
  @property
  def output_shapes(self): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
    ...
  
  @property
  def output_types(self): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
    ...
  
  @property
  def function(self): # -> _DefinedFunction | _OverloadedFunction | None:
    ...
  


