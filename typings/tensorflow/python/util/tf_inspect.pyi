"""
This type stub file was generated by pyright.
"""

import inspect as _inspect

"""TFDecorator-aware replacements for the inspect module."""
def signature(obj, *, follow_wrapped=...): # -> Signature:
  """TFDecorator-aware replacement for inspect.signature."""
  ...

Parameter = _inspect.Parameter
Signature = _inspect.Signature
if hasattr(_inspect, 'ArgSpec'):
  ArgSpec = ...
else:
  ArgSpec = ...
if hasattr(_inspect, 'FullArgSpec'):
  FullArgSpec = ...
else:
  FullArgSpec = ...
if hasattr(_inspect, 'getfullargspec'):
  _getfullargspec = ...
else:
  _getargspec = ...
def currentframe(): # -> FrameType:
  """TFDecorator-aware replacement for inspect.currentframe."""
  ...

def getargspec(obj): # -> ArgSpec:
  """TFDecorator-aware replacement for `inspect.getargspec`.

  Note: `getfullargspec` is recommended as the python 2/3 compatible
  replacement for this function.

  Args:
    obj: A function, partial function, or callable object, possibly decorated.

  Returns:
    The `ArgSpec` that describes the signature of the outermost decorator that
    changes the callable's signature, or the `ArgSpec` that describes
    the object if not decorated.

  Raises:
    ValueError: When callable's signature can not be expressed with
      ArgSpec.
    TypeError: For objects of unsupported types.
  """
  ...

def getfullargspec(obj): # -> inspect.FullArgSpec | tensorflow.python.util.tf_inspect.FullArgSpec:
  """TFDecorator-aware replacement for `inspect.getfullargspec`.

  This wrapper emulates `inspect.getfullargspec` in[^)]* Python2.

  Args:
    obj: A callable, possibly decorated.

  Returns:
    The `FullArgSpec` that describes the signature of
    the outermost decorator that changes the callable's signature. If the
    callable is not decorated, `inspect.getfullargspec()` will be called
    directly on the callable.
  """
  ...

def getcallargs(*func_and_positional, **named): # -> dict[str, Any]:
  """TFDecorator-aware replacement for inspect.getcallargs.

  Args:
    *func_and_positional: A callable, possibly decorated, followed by any
      positional arguments that would be passed to `func`.
    **named: The named argument dictionary that would be passed to `func`.

  Returns:
    A dictionary mapping `func`'s named arguments to the values they would
    receive if `func(*positional, **named)` were called.

  `getcallargs` will use the argspec from the outermost decorator that provides
  it. If no attached decorators modify argspec, the final unwrapped target's
  argspec will be used.
  """
  ...

def getframeinfo(*args, **kwargs): # -> Traceback:
  ...

def getdoc(object): # -> str | None:
  """TFDecorator-aware replacement for inspect.getdoc.

  Args:
    object: An object, possibly decorated.

  Returns:
    The docstring associated with the object.

  The outermost-decorated object is intended to have the most complete
  documentation, so the decorated parameter is not unwrapped.
  """
  ...

def getfile(object): # -> str:
  """TFDecorator-aware replacement for inspect.getfile."""
  ...

def getmembers(object, predicate=...): # -> _GetMembersReturn[Any]:
  """TFDecorator-aware replacement for inspect.getmembers."""
  ...

def getmodule(object): # -> ModuleType | None:
  """TFDecorator-aware replacement for inspect.getmodule."""
  ...

def getmro(cls): # -> tuple[type, ...]:
  """TFDecorator-aware replacement for inspect.getmro."""
  ...

def getsource(object): # -> str:
  """TFDecorator-aware replacement for inspect.getsource."""
  ...

def getsourcefile(object): # -> str | None:
  """TFDecorator-aware replacement for inspect.getsourcefile."""
  ...

def getsourcelines(object): # -> tuple[list[str], int]:
  """TFDecorator-aware replacement for inspect.getsourcelines."""
  ...

def isbuiltin(object): # -> TypeIs[BuiltinFunctionType]:
  """TFDecorator-aware replacement for inspect.isbuiltin."""
  ...

def isclass(object): # -> TypeIs[type[Any]]:
  """TFDecorator-aware replacement for inspect.isclass."""
  ...

def isfunction(object): # -> TypeIs[FunctionType]:
  """TFDecorator-aware replacement for inspect.isfunction."""
  ...

def isframe(object): # -> TypeIs[FrameType]:
  """TFDecorator-aware replacement for inspect.ismodule."""
  ...

def isgenerator(object): # -> TypeIs[GeneratorType[Any, Any, Any]]:
  """TFDecorator-aware replacement for inspect.isgenerator."""
  ...

def isgeneratorfunction(object): # -> bool:
  """TFDecorator-aware replacement for inspect.isgeneratorfunction."""
  ...

def ismethod(object): # -> TypeIs[MethodType]:
  """TFDecorator-aware replacement for inspect.ismethod."""
  ...

def isanytargetmethod(object): # -> TypeIs[Callable[..., object]] | bool:
  """Checks if `object` or a TF Decorator wrapped target contains self or cls.

  This function could be used along with `tf_inspect.getfullargspec` to
  determine if the first argument of `object` argspec is self or cls. If the
  first argument is self or cls, it needs to be excluded from argspec when we
  compare the argspec to the input arguments and, if provided, the tf.function
  input_signature.

  Like `tf_inspect.getfullargspec` and python `inspect.getfullargspec`, it
  does not unwrap python decorators.

  Args:
    obj: An method, function, or functool.partial, possibly decorated by
    TFDecorator.

  Returns:
    A bool indicates if `object` or any target along the chain of TF decorators
    is a method.
  """
  ...

def ismodule(object): # -> TypeIs[ModuleType]:
  """TFDecorator-aware replacement for inspect.ismodule."""
  ...

def isroutine(object): # -> TypeIs[FunctionType | MethodType | BuiltinFunctionType | WrapperDescriptorType | MethodDescriptorType | ClassMethodDescriptorType]:
  """TFDecorator-aware replacement for inspect.isroutine."""
  ...

def stack(context=...): # -> list[FrameInfo]:
  """TFDecorator-aware replacement for inspect.stack."""
  ...

