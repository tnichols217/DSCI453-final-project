"""
This type stub file was generated by pyright.
"""

from collections.abc import Sequence
from typing import Any, NamedTuple, Optional, Protocol, TypeVar

"""Utilities for exporting TensorFlow symbols to the API.

Exporting a function or a class:

To export a function or a class use tf_export decorator. For e.g.:
```python
@tf_export('foo', 'bar.foo')
def foo(...):
  ...
```

If a function is assigned to a variable, you can export it by calling
tf_export explicitly. For e.g.:
```python
foo = get_foo(...)
tf_export('foo', 'bar.foo')(foo)
```


Exporting a constant
```python
foo = 1
tf_export('consts.foo').export_constant(__name__, 'foo')
```
"""
KERAS_API_NAME = ...
TENSORFLOW_API_NAME = ...
SUBPACKAGE_NAMESPACES = ...
class _Attributes(NamedTuple):
  names: str
  constants: str
  ...


API_ATTRS = ...
API_ATTRS_V1 = ...
class InvalidSymbolNameError(Exception):
  """Raised when trying to export symbol as an invalid or unallowed name."""
  ...


_NAME_TO_SYMBOL_MAPPING: dict[str, Any] = ...
def get_symbol_from_name(name: str) -> Optional[Any]:
  ...

def get_canonical_name_for_symbol(symbol: Any, api_name: str = ..., add_prefix_to_v1_names: bool = ...) -> Optional[str]:
  """Get canonical name for the API symbol.

  Example:
  ```python
  from tensorflow.python.util import tf_export
  cls = tf_export.get_symbol_from_name('keras.optimizers.Adam')

  # Gives `<class 'keras.optimizer_v2.adam.Adam'>`
  print(cls)

  # Gives `keras.optimizers.Adam`
  print(tf_export.get_canonical_name_for_symbol(cls, api_name='keras'))
  ```

  Args:
    symbol: API function or class.
    api_name: API name. Currently, only `tensorflow`.
    add_prefix_to_v1_names: Specifies whether a name available only in V1 should
      be prefixed with compat.v1.

  Returns:
    Canonical name for the API symbol (for e.g. initializers.zeros) if
    canonical name could be determined. Otherwise, returns None.
  """
  ...

def get_canonical_name(api_names: Sequence[str], deprecated_api_names: Sequence[str]) -> Optional[str]:
  """Get preferred endpoint name.

  Args:
    api_names: API names iterable.
    deprecated_api_names: Deprecated API names iterable.

  Returns:
    Returns one of the following in decreasing preference:
    - first non-deprecated endpoint
    - first endpoint
    - None
  """
  ...

def get_v1_names(symbol: Any) -> Sequence[str]:
  """Get a list of TF 1.* names for this symbol.

  Args:
    symbol: symbol to get API names for.

  Returns:
    List of all API names for this symbol.
  """
  ...

def get_v2_names(symbol: Any) -> Sequence[str]:
  """Get a list of TF 2.0 names for this symbol.

  Args:
    symbol: symbol to get API names for.

  Returns:
    List of all API names for this symbol.
  """
  ...

def get_v1_constants(module: Any) -> Sequence[str]:
  """Get a list of TF 1.* constants in this module.

  Args:
    module: TensorFlow module.

  Returns:
    List of all API constants under the given module.
  """
  ...

def get_v2_constants(module: Any) -> Sequence[str]:
  """Get a list of TF 2.0 constants in this module.

  Args:
    module: TensorFlow module.

  Returns:
    List of all API constants under the given module.
  """
  ...

T = TypeVar('T')
class api_export:
  """Provides ways to export symbols to the TensorFlow API."""
  _names: Sequence[str]
  _names_v1: Sequence[str]
  _api_name: str
  def __init__(self, *args: str, api_name: str = ..., v1: Optional[Sequence[str]] = ..., allow_multiple_exports: bool = ...) -> None:
    """Export under the names *args (first one is considered canonical).

    Args:
      *args: API names in dot delimited format.
      api_name: API you want to generate Currently, only `tensorflow`.
      v1: Names for the TensorFlow V1 API. If not set, we will use V2 API names
        both for TensorFlow V1 and V2 APIs.
      allow_multiple_exports: Deprecated.
    """
    ...
  
  def __call__(self, func: T) -> T:
    """Calls this decorator.

    Args:
      func: decorated symbol (function or class).

    Returns:
      The input function with _tf_api_names attribute set.
    """
    ...
  
  def set_attr(self, func: Any, api_names_attr: str, names: Sequence[str]) -> None:
    ...
  
  def export_constant(self, module_name: str, name: str) -> None:
    """Store export information for constants/string literals.

    Export information is stored in the module where constants/string literals
    are defined.

    e.g.
    ```python
    foo = 1
    bar = 2
    tf_export("consts.foo").export_constant(__name__, 'foo')
    tf_export("consts.bar").export_constant(__name__, 'bar')
    ```

    Args:
      module_name: (string) Name of the module to store constant at.
      name: (string) Current constant name.
    """
    ...
  


def kwarg_only(f: Any) -> Any:
  """A wrapper that throws away all non-kwarg arguments."""
  ...

class ExportType(Protocol):
  def __call__(self, *v2: str, v1: Optional[Sequence[str]] = ..., allow_multiple_exports: bool = ...) -> api_export:
    ...
  


tf_export: ExportType = ...
keras_export: ExportType = ...
