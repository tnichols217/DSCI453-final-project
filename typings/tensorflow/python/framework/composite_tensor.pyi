"""
This type stub file was generated by pyright.
"""

import abc
from tensorflow.python.util.tf_export import tf_export

"""Tensor-like objects that are composed from tf.Tensors."""
@tf_export("__internal__.CompositeTensor", v1=[])
class CompositeTensor(metaclass=abc.ABCMeta):
  """Abstract base class for Tensor-like objects that are composed from Tensors.

  Each `CompositeTensor` can be decomposed into a structured collection of
  component `tf.Tensor`s, and reconstructed from those components.

  The `tensorflow.python.util.nest` module has support for treating composite
  tensors as structure, which makes it easy to flatten and reconstruct
  composite tensors (or larger structures that contain composite tensors).
  E.g.:

  ```python
  ct = ...  # Create a composite tensor.
  flat_list_of_tensors = nest.flatten(ct, expand_composites=True)
  transformed_list_of_tensors = ...  # do something with the flat tensors.
  result = nest.pack_sequence_as(ct, transformed_list_of_tensors,
                                 expand_composites=True)
  ```
  """
  def __tf_tracing_type__(self, context):
    ...
  


def replace_composites_with_components(structure): # -> defaultdict[Any, Any] | Any | list[Any] | object | None:
  """Recursively replaces CompositeTensors with their components.

  Args:
    structure: A `nest`-compatible structure, possibly containing composite
      tensors.

  Returns:
    A copy of `structure`, where each composite tensor has been replaced by
    its components.  The result will contain no composite tensors.
    Note that `nest.flatten(replace_composites_with_components(structure))`
    returns the same value as `nest.flatten(structure)`.
  """
  ...

def convert_variables_to_tensors(composite_tensor):
  ...

