"""
This type stub file was generated by pyright.
"""

"""Utility to convert FunctionDef to GraphDef and Graph."""
def function_def_to_graph(fdef, structured_input_signature=..., structured_outputs=..., input_shapes=..., propagate_device_spec=..., include_library_functions=...): # -> FuncGraph:
  """Converts a FunctionDef to a FuncGraph (sub-class Graph).

  The returned FuncGraph's `name`, `inputs` and `outputs` fields will be set.
  The input tensors are represented as placeholders.

  Note: `FuncGraph.inputs` and `FuncGraph.captures` are not set and may be set
  by the caller.

  Args:
    fdef: FunctionDef.
    structured_input_signature: Optional. The structured input signature to use
      for initializing the FuncGraph. See the docstring for FuncGraph for more
      information.
    structured_outputs: Optional. The structured outputs to use for initializing
      the FuncGraph. See the docstring for FuncGraph for more information.
    input_shapes: Optional. A list of TensorShape objects of the shapes of
      function inputs. Defaults to the function's "_input_shapes" attribute. If
      specified, its length must match length of `fdef.signature.input_arg`. If
      a shape is None, the corresponding input placeholder will have unknown
      shape.
    propagate_device_spec: Optional. Whether to propagate assigned device
      information when constructing a new Graph from a FunctionDef.
    include_library_functions: Optional. Whether to include library functions in
      the output FuncGraph. In graph mode, the library functions will be found
      from outer graph. In eager mode, the library functions will be found from
      eager context.

  Returns:
    A FuncGraph.
  """
  ...

def is_function(fname, graph): # -> bool | None:
  """Checks for a function definition with `fname` in the current context."""
  ...

def get_function_def(fname, graph): # -> Any | None:
  """Gets a function definition with `fname` in the current context."""
  ...

def copy_function_def_to_graph_def_recursively(func_name, graph_def, copied_functions, default_graph=...): # -> None:
  """Recursively copies `FunctionDef`s to `GraphDef`.

  It copies the outermost `FunctionDef` and all nested `FunctionDef`s to
  `graph_def`. The `copied_function` enforces that every `FunctionDef` will be
  copied at most once. The `FunctionDef`s will be found from `default_graph` if
  this function was called in graph mode or from eager context if this function
  was called in eager mode.

  Args:
    func_name: The signature name of FunctionDef to be copied to `graph_def`.
    graph_def: The GraphDef that will contain all `FunctionDef`s in its library.
    copied_functions: A set contains all copied function names.
    default_graph: The `tf.Graph` where all `FunctionDef`s will be found
      in graph mode. Not used in eager mode.
  """
  ...

def function_def_to_graph_def(fdef, input_shapes=..., include_library_functions=...): # -> tuple[Any, dict[Any, Any]]:
  """Convert a FunctionDef to a GraphDef.

  Steps:
  1. Creates placeholder nodes corresponding to inputs in
     `FunctionDef.signature.input_arg`.
  2. Adds NodeDefs in `FunctionDef.node_def` to `GraphDef.node`.
  3. Renames inputs of all nodes to use the convention of GraphDef instead of
     FunctionDef. See comment on `FunctionDef.node_def` on how the tensor naming
     in FunctionDefs is different from GraphDefs.

  Args:
    fdef: FunctionDef.
    input_shapes: Optional. A list of TensorShape objects of the shapes of
      function inputs. If specified, its length must match length of
      `fdef.signature.input_arg`. If a shape is None, the corresponding input
      placeholder will have unknown shape.
    include_library_functions: Optional. If enabled, copy `fdef` and its
      nested `FunctionDef`s to the library functions of the returned `GraphDef`.
      In graph mode, the functions will be found from outer graph. In eager
      mode, the functions will be found from eager context.

  Returns:
    A tuple of (GraphDef, dict<string, string>). The dict contains a mapping
    from nested tensor names (in FunctionDef) to flattened names (in GraphDef).

  Raises:
    ValueError: If the length of input_shapes does not match the number of
      input_args or if the FunctionDef is invalid.
  """
  ...

