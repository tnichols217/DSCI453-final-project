"""
This type stub file was generated by pyright.
"""

from typing import Optional
from tensorflow.python.framework import composite_tensor_gradient, dtypes, extension_type, tensor as tensor_lib
from tensorflow.python.types import core

"""An extension type that represents WeakTensor."""
_ALLOWED_WEAK_DTYPES = ...
class WeakTensorGradient(composite_tensor_gradient.CompositeTensorGradient):
  """CompositeTensorGradient for WeakTensor."""
  def get_gradient_components(self, weak_tensor):
    ...
  
  def replace_gradient_components(self, weak_tensor, component_grads):
    ...
  


class WeakTensor(extension_type.BatchableExtensionType, core.Tensor):
  """A weakly typed Tensor.

  A simple wrapper class that contains a normal Tensor.

  A "weak" type means that its dtype is temporarily inferred by the system,
  and could defer to other dtypes.

  i.g. weak f64 + f16 => f16

  This information is used for auto dtype conversion.
  """
  __name__ = ...
  tensor: tensor_lib.Tensor
  def __validate__(self): # -> None:
    ...
  
  def __str__(self) -> str:
    ...
  
  def __repr__(self): # -> str:
    ...
  
  def __getattr__(self, *args, **kwargs): # -> Any:
    ...
  
  def __iter__(self): # -> _WeakTensorIterator:
    ...
  
  def __hash__(self) -> int:
    ...
  
  def __copy__(self): # -> Self:
    ...
  
  def __len__(self):
    ...
  
  def __bool__(self):
    ...
  
  def __tf_tensor__(self, dtype: Optional[dtypes.DType] = ..., name: Optional[str] = ...): # -> Tensor:
    ...
  
  def __deepcopy__(self, memo): # -> Self:
    ...
  
  def to_tensor(self): # -> Tensor:
    """Converts this 'WeakTensor' into a 'tf.Tensor'."""
    ...
  
  @classmethod
  def from_tensor(cls, tensor): # -> EagerWeakTensor | GraphWeakTensor:
    """Converts a 'tf.Tensor' into a 'WeakTensor'.

    This should be the standard way of creating a WeakTensor instead
    of directly calling the WeakTensor constructor.

    Args:
      tensor: The `tf.Tensor` that should be converted into a 'WeakTensor'.

    Returns:
      A `EagerWeakTensor` or 'GraphWeakTensor' that holds the `tensor`.
    """
    ...
  
  @property
  def dtype(self): # -> None:
    ...
  
  @property
  def shape(self): # -> TensorShape:
    ...
  
  @property
  def is_tensor_like(self): # -> Literal[True]:
    ...
  
  __composite_gradient__ = ...


class EagerWeakTensor(core.Value, WeakTensor):
  """A weakly typed Eager Tensor."""
  __name__ = ...
  def numpy(self):
    """Copy of the contents of this EagerWeakTensor into a NumPy array or scalar."""
    ...
  
  def __complex__(self):
    ...
  
  def __int__(self) -> int:
    ...
  
  def __float__(self):
    ...
  
  def __index__(self):
    ...
  
  def __format__(self, format_spec): # -> str:
    ...
  
  def __array__(self, dtype=...): # -> NDArray[Any]:
    ...
  


class GraphWeakTensor(core.Symbol, WeakTensor):
  """A weakly typed Graph Tensor."""
  __name__ = ...


class _WeakTensorIterator:
  """Iterates over the leading dim of a WeakTensor. Performs no error checks."""
  __slots__ = ...
  def __init__(self, weak_tensor, dim0) -> None:
    ...
  
  def __iter__(self): # -> Self:
    ...
  
  def __next__(self): # -> EagerWeakTensor | GraphWeakTensor:
    ...
  


def convert_to_weak_tensor_or_tensor(t, to_weak): # -> EagerWeakTensor | GraphWeakTensor | Tensor:
  ...

def weak_tensor_conversion_function(t): # -> Tensor | None:
  ...

