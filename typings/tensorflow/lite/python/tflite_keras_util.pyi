"""
This type stub file was generated by pyright.
"""

"""Keras functions required by TensorFlow Lite.

The functions defined in this library have been copied over from Keras in order
to remove the dependency from TensorFlow Lite to Keras. The functions which
could not be copied over are accessed using the dependency inversion principle.
(for details, refer to tensorflow/python/util/keras_deps.py).
"""
def get_save_spec(model): # -> TensorSpec | dict[Any, Any] | list[Any] | None:
  """Returns the save spec of the subclassing keras model."""
  ...

def model_input_signature(model, keep_original_batch_size=...): # -> Sequence[Any] | list[Any] | list[Any | defaultdict[Any, Any] | object | Sequence[Any] | list[Any] | None] | None:
  """Inspect model to get its input signature.

  The model's input signature is a list with a single (possibly-nested) object.
  This is due to the Keras-enforced restriction that tensor inputs must be
  passed in as the first argument.

  For example, a model with input {'feature1': <Tensor>, 'feature2': <Tensor>}
  will have input signature: [{'feature1': TensorSpec, 'feature2': TensorSpec}]

  Args:
    model: Keras Model object.
    keep_original_batch_size: A boolean indicating whether we want to keep using
      the original batch size or set it to None. Default is `False`, which means
      that the batch dim of the returned input signature will always be set to
      `None`.

  Returns:
    A list containing either a single TensorSpec or an object with nested
    TensorSpecs. This list does not contain the `training` argument.
  """
  ...

def raise_model_input_error(model):
  ...

def create_pseudo_output_names(outputs): # -> list[Any]:
  """Create pseudo output names for a subclassed Model."""
  ...

def trace_model_call(model, input_signature=...): # -> None:
  """Trace the model call to create a tf.function for exporting a Keras model.

  Args:
    model: A Keras model.
    input_signature: optional, a list of tf.TensorSpec objects specifying the
      inputs to the model.

  Returns:
    A tf.function wrapping the model's call function with input signatures set.

  Raises:
    ValueError: if input signature cannot be inferred from the model.
  """
  ...

