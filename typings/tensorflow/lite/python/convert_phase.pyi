"""
This type stub file was generated by pyright.
"""

import enum
from tensorflow.compiler.mlir.lite.metrics import converter_error_data_pb2

"""Utilities for collecting TFLite metrics."""
class Component(enum.Enum):
  """Enum class defining name of the converter components."""
  PREPARE_TF_MODEL = ...
  CONVERT_TF_TO_TFLITE_MODEL = ...
  OPTIMIZE_TFLITE_MODEL = ...


SubComponentItem = ...
class SubComponent(SubComponentItem, enum.Enum):
  """Enum class defining name of the converter subcomponents.

  This enum only defines the subcomponents in Python, there might be more
  subcomponents defined in C++.
  """
  def __str__(self) -> str:
    ...
  
  @property
  def name(self): # -> Any:
    ...
  
  @property
  def component(self): # -> Any:
    ...
  
  UNSPECIFIED = ...
  VALIDATE_INPUTS = ...
  LOAD_SAVED_MODEL = ...
  FREEZE_SAVED_MODEL = ...
  CONVERT_KERAS_TO_SAVED_MODEL = ...
  CONVERT_CONCRETE_FUNCTIONS_TO_SAVED_MODEL = ...
  FREEZE_KERAS_MODEL = ...
  FREEZE_CONCRETE_FUNCTION = ...
  OPTIMIZE_TF_MODEL = ...
  CONVERT_GRAPHDEF_USING_DEPRECATED_CONVERTER = ...
  CONVERT_GRAPHDEF = ...
  CONVERT_SAVED_MODEL = ...
  CONVERT_JAX_HLO = ...
  QUANTIZE_USING_DEPRECATED_QUANTIZER = ...
  CALIBRATE = ...
  QUANTIZE = ...
  SPARSIFY = ...


class ConverterError(Exception):
  """Raised when an error occurs during model conversion."""
  def __init__(self, message) -> None:
    ...
  
  def append_error(self, error_data: converter_error_data_pb2.ConverterErrorData): # -> None:
    ...
  


def convert_phase(component, subcomponent=...): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
  """The decorator to identify converter component and subcomponent.

  Args:
    component: Converter component name.
    subcomponent: Converter subcomponent name.

  Returns:
    Forward the result from the wrapped function.

  Raises:
    ValueError: if component and subcomponent name is not valid.
  """
  ...

