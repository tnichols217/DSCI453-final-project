"""
This type stub file was generated by pyright.
"""

from typing import Any

class InterpreterWrapper:
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def AllocateTensors(self, subgraph_index: int = ...) -> object:
        ...
    
    def GetSignatureDefs(self) -> object:
        ...
    
    def GetSubgraphIndexFromSignature(self, arg0: str) -> object:
        ...
    
    def GetTensor(self, tensor_index: int, subgraph_index: int = ...) -> object:
        ...
    
    def InputIndices(self) -> object:
        ...
    
    def Invoke(self, subgraph_index: int = ...) -> object:
        ...
    
    def ModifyGraphWithDelegate(self, arg0: int) -> object:
        ...
    
    def NodeInputs(self, arg0: int) -> object:
        ...
    
    def NodeName(self, arg0: int) -> str:
        ...
    
    def NodeOutputs(self, arg0: int) -> object:
        ...
    
    def NumNodes(self) -> int:
        ...
    
    def NumSubgraphs(self) -> int:
        ...
    
    def NumTensors(self, arg0: int) -> int:
        ...
    
    def OutputIndices(self) -> object:
        ...
    
    def ResetVariableTensors(self) -> object:
        ...
    
    def ResizeInputTensor(self, i: int, value: object, strict: bool, subgraph_index: int = ...) -> object:
        ...
    
    def SetNumThreads(self, arg0: int) -> object:
        ...
    
    def SetTensor(self, i: int, value: object, subgraph_index: int = ...) -> object:
        ...
    
    def TensorName(self, arg0: int, arg1: int) -> str:
        ...
    
    def TensorQuantization(self, arg0: int, arg1: int) -> object:
        ...
    
    def TensorQuantizationParameters(self, arg0: int, arg1: int) -> object:
        ...
    
    def TensorSize(self, arg0: int, arg1: int) -> object:
        ...
    
    def TensorSizeSignature(self, arg0: int, arg1: int) -> object:
        ...
    
    def TensorSparsityParameters(self, arg0: int, arg1: int) -> object:
        ...
    
    def TensorType(self, arg0: int, arg1: int) -> object:
        ...
    
    def interpreter(self) -> int:
        ...
    
    def tensor(self, base_object: object, tensor_index: int, subgraph_index: int = ...) -> object:
        ...
    


def CreateWrapperFromBuffer(*args, **kwargs) -> Any:
    ...

def CreateWrapperFromFile(*args, **kwargs) -> Any:
    ...

