"""
This type stub file was generated by pyright.
"""

np = ...
class ModelType:
    NONE = ...
    TF_SAVED_MODEL = ...
    KERAS_MODEL = ...
    TF_CONCRETE_FUNCTIONS = ...
    TF_GRAPH_DEF = ...
    TF_SESSION = ...
    JAX = ...
    PYTORCH = ...


class ModelOptimizationMode:
    PTQ_FLOAT16 = ...
    PTQ_DYNAMIC_RANGE = ...
    PTQ_FULL_INTEGER = ...
    PTQ_INT16 = ...
    QUANTIZATION_AWARE_TRAINING = ...
    RANDOM_SPARSITY = ...
    BLOCK_SPARSITY = ...
    STRUCTURED_SPARSITY = ...


class Environment:
    __slots__ = ...
    @classmethod
    def GetRootAs(cls, buf, offset=...): # -> Environment:
        ...
    
    @classmethod
    def GetRootAsEnvironment(cls, buf, offset=...): # -> Environment:
        """This method is deprecated. Please switch to GetRootAs."""
        ...
    
    def Init(self, buf, pos): # -> None:
        ...
    
    def TensorflowVersion(self): # -> bytes | None:
        ...
    
    def ApiVersion(self): # -> Literal[0]:
        ...
    
    def ModelType(self): # -> Literal[0]:
        ...
    
    def ModelHash(self): # -> Literal[0]:
        ...
    


def EnvironmentStart(builder): # -> None:
    ...

def EnvironmentAddTensorflowVersion(builder, tensorflowVersion): # -> None:
    ...

def EnvironmentAddApiVersion(builder, apiVersion): # -> None:
    ...

def EnvironmentAddModelType(builder, modelType): # -> None:
    ...

def EnvironmentAddModelHash(builder, modelHash): # -> None:
    ...

def EnvironmentEnd(builder):
    ...

class EnvironmentT:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def InitFromBuf(cls, buf, pos): # -> EnvironmentT:
        ...
    
    @classmethod
    def InitFromPackedBuf(cls, buf, pos=...): # -> EnvironmentT:
        ...
    
    @classmethod
    def InitFromObj(cls, environment): # -> EnvironmentT:
        ...
    
    def Pack(self, builder):
        ...
    


class SparsityBlockSize:
    __slots__ = ...
    @classmethod
    def GetRootAs(cls, buf, offset=...): # -> SparsityBlockSize:
        ...
    
    @classmethod
    def GetRootAsSparsityBlockSize(cls, buf, offset=...): # -> SparsityBlockSize:
        """This method is deprecated. Please switch to GetRootAs."""
        ...
    
    def Init(self, buf, pos): # -> None:
        ...
    
    def Values(self, j): # -> Literal[0]:
        ...
    
    def ValuesAsNumpy(self): # -> NDArray[float64] | Literal[0]:
        ...
    
    def ValuesLength(self): # -> Any | Literal[0]:
        ...
    
    def ValuesIsNone(self):
        ...
    


def SparsityBlockSizeStart(builder): # -> None:
    ...

def SparsityBlockSizeAddValues(builder, values): # -> None:
    ...

def SparsityBlockSizeStartValuesVector(builder, numElems):
    ...

def SparsityBlockSizeEnd(builder):
    ...

class SparsityBlockSizeT:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def InitFromBuf(cls, buf, pos): # -> SparsityBlockSizeT:
        ...
    
    @classmethod
    def InitFromPackedBuf(cls, buf, pos=...): # -> SparsityBlockSizeT:
        ...
    
    @classmethod
    def InitFromObj(cls, sparsityBlockSize): # -> SparsityBlockSizeT:
        ...
    
    def Pack(self, builder):
        ...
    


class ConversionOptions:
    __slots__ = ...
    @classmethod
    def GetRootAs(cls, buf, offset=...): # -> ConversionOptions:
        ...
    
    @classmethod
    def GetRootAsConversionOptions(cls, buf, offset=...): # -> ConversionOptions:
        """This method is deprecated. Please switch to GetRootAs."""
        ...
    
    def Init(self, buf, pos): # -> None:
        ...
    
    def ModelOptimizationModes(self, j): # -> Literal[0]:
        ...
    
    def ModelOptimizationModesAsNumpy(self): # -> NDArray[float64] | Literal[0]:
        ...
    
    def ModelOptimizationModesLength(self): # -> Any | Literal[0]:
        ...
    
    def ModelOptimizationModesIsNone(self):
        ...
    
    def AllowCustomOps(self): # -> bool:
        ...
    
    def EnableSelectTfOps(self): # -> bool:
        ...
    
    def ForceSelectTfOps(self): # -> bool:
        ...
    
    def SparsityBlockSizes(self, j): # -> SparsityBlockSize | None:
        ...
    
    def SparsityBlockSizesLength(self): # -> Any | Literal[0]:
        ...
    
    def SparsityBlockSizesIsNone(self):
        ...
    


def ConversionOptionsStart(builder): # -> None:
    ...

def ConversionOptionsAddModelOptimizationModes(builder, modelOptimizationModes): # -> None:
    ...

def ConversionOptionsStartModelOptimizationModesVector(builder, numElems):
    ...

def ConversionOptionsAddAllowCustomOps(builder, allowCustomOps): # -> None:
    ...

def ConversionOptionsAddEnableSelectTfOps(builder, enableSelectTfOps): # -> None:
    ...

def ConversionOptionsAddForceSelectTfOps(builder, forceSelectTfOps): # -> None:
    ...

def ConversionOptionsAddSparsityBlockSizes(builder, sparsityBlockSizes): # -> None:
    ...

def ConversionOptionsStartSparsityBlockSizesVector(builder, numElems):
    ...

def ConversionOptionsEnd(builder):
    ...

class ConversionOptionsT:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def InitFromBuf(cls, buf, pos): # -> ConversionOptionsT:
        ...
    
    @classmethod
    def InitFromPackedBuf(cls, buf, pos=...): # -> ConversionOptionsT:
        ...
    
    @classmethod
    def InitFromObj(cls, conversionOptions): # -> ConversionOptionsT:
        ...
    
    def Pack(self, builder):
        ...
    


class ConversionMetadata:
    __slots__ = ...
    @classmethod
    def GetRootAs(cls, buf, offset=...): # -> ConversionMetadata:
        ...
    
    @classmethod
    def GetRootAsConversionMetadata(cls, buf, offset=...): # -> ConversionMetadata:
        """This method is deprecated. Please switch to GetRootAs."""
        ...
    
    def Init(self, buf, pos): # -> None:
        ...
    
    def Environment(self): # -> Environment | None:
        ...
    
    def Options(self): # -> ConversionOptions | None:
        ...
    


def ConversionMetadataStart(builder): # -> None:
    ...

def ConversionMetadataAddEnvironment(builder, environment): # -> None:
    ...

def ConversionMetadataAddOptions(builder, options): # -> None:
    ...

def ConversionMetadataEnd(builder):
    ...

class ConversionMetadataT:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def InitFromBuf(cls, buf, pos): # -> ConversionMetadataT:
        ...
    
    @classmethod
    def InitFromPackedBuf(cls, buf, pos=...): # -> ConversionMetadataT:
        ...
    
    @classmethod
    def InitFromObj(cls, conversionMetadata): # -> ConversionMetadataT:
        ...
    
    def Pack(self, builder):
        ...
    


