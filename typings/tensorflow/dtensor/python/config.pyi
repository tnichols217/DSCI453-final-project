"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from tensorflow.python.framework import device as tf_device
from tensorflow.python.util.tf_export import tf_export

"""DTensor Configuration API."""
_DT_CLIENT_ID = ...
_DT_NUM_CLIENTS = ...
_DT_JOB_NAME = ...
_DT_JOBS = ...
_DT_HEARTBEAT_ENABLED = ...
@tf_export("experimental.dtensor.local_devices", v1=[])
def local_devices(device_type: str, for_client_id: Optional[int] = ...) -> List[tf_device.DeviceSpec]:
  """Returns a list of device specs configured on this client."""
  ...

@tf_export("experimental.dtensor.num_local_devices", v1=[])
def num_local_devices(device_type: str) -> int:
  """Returns the number of devices of device_type configured on this client."""
  ...

@tf_export("experimental.dtensor.num_global_devices", v1=[])
def num_global_devices(device_type: str) -> int:
  """Returns the number of devices of device_type in this DTensor cluster."""
  ...

@tf_export("experimental.dtensor.client_id", v1=[])
def client_id() -> int:
  """Returns this client's ID."""
  ...

@tf_export("experimental.dtensor.num_clients", v1=[])
def num_clients() -> int:
  """Returns the number of clients in this DTensor cluster."""
  ...

@tf_export("experimental.dtensor.job_name", v1=[])
def job_name() -> str:
  """Returns the job name used by all clients in this DTensor cluster."""
  ...

@tf_export("experimental.dtensor.full_job_name", v1=[])
def full_job_name(task_id: Optional[int] = ...) -> str:
  """Returns the fully qualified TF job name for this or another task."""
  ...

@tf_export("experimental.dtensor.jobs", v1=[])
def jobs() -> List[str]:
  """Returns a list of job names of all clients in this DTensor cluster."""
  ...

@tf_export("experimental.dtensor.heartbeat_enabled", v1=[])
def heartbeat_enabled() -> bool:
  """Returns true if DTensor heartbeat service is enabled."""
  ...

def is_local_mode() -> bool:
  """Returns true if DTensor shall run in local mode."""
  ...

def is_tpu_present() -> bool:
  """Returns true if TPU devices are present."""
  ...

def is_gpu_present() -> bool:
  """Returns true if TPU devices are present."""
  ...

@tf_export("experimental.dtensor.preferred_device_type", v1=[])
def preferred_device_type() -> str:
  """Returns the preferred device type for the accelerators.

  The returned device type is determined by checking the first present device
  type from all supported device types in the order of 'TPU', 'GPU', 'CPU'.
  """
  ...

def use_multi_device_mode() -> bool:
  """Return True if environment indicates multi-device mode is enabled."""
  ...

def gpu_use_nccl_communication() -> bool:
  """Return True if environment indicates NCCL shall be used for GPU."""
  ...

def backend_is_pw() -> bool:
  """Return True if environment indicates the backend is Pathways."""
  ...

