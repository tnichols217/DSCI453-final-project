"""
This type stub file was generated by pyright.
"""

from tensorflow.python.ops import resource_variable_ops
from tensorflow.python.training.saving import saveable_object
from tensorflow.python.util.tf_export import tf_export

"""DTensor variable and saveable."""
class DSaveSpec(saveable_object.SaveSpec):
  """DTensor SaveSpec that additionaly captures global_shape and layout."""
  def __init__(self, tensor, slice_spec, name, global_shape, layout, dtype=..., device=...) -> None:
    ...
  


class _DVariableSaveable(saveable_object.SaveableObject):
  """Class for defining how to save/restore DTensor variable."""
  def __init__(self, dvariable, name) -> None:
    ...
  
  def should_cast(self, v):
    """Returns True if v has float32 dtype and is intructed to save as bf16.

    Args:
      v : The variable that determines whether to cast.

    Returns:
      True if current savable DVariable is instructed to save as bfloat16 and
        the variable has dtype float32.
    """
    ...
  
  def restore(self, restored_tensors, restored_shapes):
    """Restores the same value into all variables."""
    ...
  


@tf_export('experimental.dtensor.DVariable', v1=[])
class DVariable(resource_variable_ops.ResourceVariable):
  """A replacement for tf.Variable which follows initial value placement.

    The class also handles restore/save operations in DTensor. Note that,
    DVariable may fall back to normal tf.Variable at this moment if
    `initial_value` is not a DTensor.
  """
  def __init__(self, initial_value, *args, dtype=..., **kwargs) -> None:
    """Overrides tf.Variable to fix VarHandleOp placements."""
    ...
  
  @property
  def save_as_bf16(self): # -> bool:
    ...
  
  @save_as_bf16.setter
  def save_as_bf16(self, save_as_bf16): # -> None:
    """Enables saving float32 as bfloat16."""
    ...
  


