"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import Dict, List, Optional, Union
from tensorflow.dtensor.proto import layout_pb2
from tensorflow.python import _pywrap_dtensor_device
from tensorflow.python.framework import device as tf_device, tensor
from tensorflow.python.util.tf_export import tf_export

"""Python definitions for `Mesh` and `Layout`."""
UNSHARDED = ...
MATCH = ...
USE_XLA_SPMD = ...
MeshDimension = ...
@tf_export('experimental.dtensor.Mesh', v1=[])
class Mesh(_pywrap_dtensor_device.Mesh):
  """Represents a Mesh configuration over a certain list of Mesh Dimensions.

  A mesh consists of named dimensions with sizes, which describe how a set of
  devices are arranged. Defining tensor layouts in terms of mesh dimensions
  allows us to efficiently determine the communication required when computing
  an operation with tensors of different layouts.

  A mesh provides information not only about the placement of the tensors but
  also the topology of the underlying devices. For example, we can group 8 TPUs
  as a 1-D array for data parallelism or a `2x4` grid for (2-way) data
  parallelism and (4-way) model parallelism.

  Refer to [DTensor Concepts](https://www.tensorflow.org/guide/dtensor_overview)
  for in depth discussion and examples.

  Note: the utilities `dtensor.create_mesh` and
  `dtensor.create_distributed_mesh` provide a simpler API to create meshes for
  single- or multi-client use cases.
  """
  def __init__(self, dim_names: List[str], global_device_ids: np.ndarray, local_device_ids: List[int], local_devices: List[Union[tf_device.DeviceSpec, str]], mesh_name: str = ..., global_devices: Optional[List[Union[tf_device.DeviceSpec, str]]] = ..., use_xla_spmd: bool = ...) -> None:
    """Builds a Mesh.

    The `dim_names` and `global_device_ids` arguments describe the dimension
    names and shape for the mesh.

    For example,

    ```python
      dim_names = ('x', 'y'),
      global_device_ids = [[0, 1],
                           [2, 3],
                           [4, 5]]
    ```

    defines a 2D mesh of shape 3x2. A reduction over the 'x' dimension will
    reduce across columns (0, 2, 4) and (1, 3, 5), and a reduction over the 'y'
    dimension reduces across rows.

    Note: the utilities `dtensor.create_mesh` and
    `dtensor.create_distributed_mesh` provide a simpler API to create meshes for
    single- or multi-client use cases.

    Args:
      dim_names: A list of strings indicating dimension names.
      global_device_ids: An ndarray of global device IDs is used to compose
        DeviceSpecs describing the mesh. The shape of this array determines the
        size of each mesh dimension. Values in this array should increment
        sequentially from 0. This argument is the same for every DTensor client.
      local_device_ids: A list of local device IDs equal to a subset of values
        in global_device_ids. They indicate the position of local devices in the
        global mesh. Different DTensor clients must contain distinct
        local_device_ids contents. All local_device_ids from all DTensor clients
        must cover every element in global_device_ids.
      local_devices: The list of devices hosted locally. The elements correspond
        1:1 to those of local_device_ids.
      mesh_name: The name of the mesh. Currently, this is rarely used, and is
        mostly used to indicate whether it is a CPU, GPU, or TPU-based mesh.
      global_devices (optional): The list of global devices. Set when multiple
        device meshes are in use.
      use_xla_spmd (optional): Boolean when True, will use XLA SPMD instead of
        DTensor SPMD.
    """
    ...
  
  def global_device_ids(self) -> np.ndarray:
    """Returns a global device list as an array."""
    ...
  
  def __getitem__(self, dim_name: str) -> MeshDimension:
    ...
  
  def __hash__(self) -> int:
    ...
  
  def __repr__(self) -> str:
    ...
  
  def __reduce__(self): # -> tuple[Callable[..., Mesh], tuple[Any]]:
    ...
  
  def coords(self, device_idx: int) -> tensor.Tensor:
    """Converts the device index into a tensor of mesh coordinates."""
    ...
  
  @classmethod
  def from_proto(cls, proto: layout_pb2.MeshProto) -> Mesh:
    """Construct a mesh instance from input `proto`."""
    ...
  
  @classmethod
  def from_string(cls, mesh_str: str) -> Mesh:
    ...
  
  @classmethod
  def from_device(cls, device: str) -> Mesh:
    """Constructs a single device mesh from a device string."""
    ...
  
  def host_mesh(self) -> Mesh:
    """Returns a host mesh."""
    ...
  
  def local_device_locations(self) -> List[Dict[str, int]]:
    """Returns a list of local device locations.

    A device location is a dictionary from dimension names to indices on those
    dimensions.
    """
    ...
  
  @property
  def strides(self) -> List[int]:
    """Returns the strides tensor array for this mesh.

    If the mesh shape is `[a, b, c, d]`, then the strides array can be computed
    as `[b*c*d, c*d, d, 1]`. This array can be useful in computing local device
    offsets given a device ID. Using the same example, the device coordinates of
    the mesh can be computed as:

    ```
    [(device_id / (b*c*d)) % a,
     (device_id / (c*d))   % b,
     (device_id / (d))     % c,
     (device_id)           % d]
    ```

    This is the same as `(device_id // mesh.strides) % mesh.shape`.

    Returns:
      The mesh strides as an integer tensor.
    """
    ...
  
  def unravel_index(self): # -> dict[Any, Any]:
    """Returns a dictionary from device ID to {dim_name: dim_index}.

    For example, for a 3x2 mesh, return this:

    ```
      { 0: {'x': 0, 'y', 0},
        1: {'x': 0, 'y', 1},
        2: {'x': 1, 'y', 0},
        3: {'x': 1, 'y', 1},
        4: {'x': 2, 'y', 0},
        5: {'x': 2, 'y', 1} }
    ```
    """
    ...
  


LayoutType = ...
@tf_export('experimental.dtensor.Layout', v1=[])
class Layout(_pywrap_dtensor_device.Layout):
  """Represents the layout information of a DTensor.

  A layout describes how a distributed tensor is partitioned across a mesh (and
  thus across devices). For each axis of the tensor, the corresponding
  sharding spec indicates which dimension of the mesh it is sharded over. A
  special sharding spec `UNSHARDED` indicates that axis is replicated on
  all the devices of that mesh.

  Refer to [DTensor Concepts](https://www.tensorflow.org/guide/dtensor_overview)
  for in depth discussion and examples.

  For example, let's consider a 1-D mesh:

  ```
  Mesh(["TPU:0", "TPU:1", "TPU:2", "TPU:3", "TPU:4", "TPU:5"], [("x", 6)])
  ```

  This mesh arranges 6 TPU devices into a 1-D array. `Layout([UNSHARDED], mesh)`
  is a layout for rank-1 tensor which is replicated on the 6 devices.

  For another example, let's consider a 2-D mesh:

  ```
  Mesh(["TPU:0", "TPU:1", "TPU:2", "TPU:3", "TPU:4", "TPU:5"],
       [("x", 3), ("y", 2)])
  ```

  This mesh arranges 6 TPU devices into a `3x2` 2-D array.
  `Layout(["x", UNSHARDED], mesh)` is a layout for rank-2 tensor whose first
  axis is sharded on mesh dimension "x" and the second axis is replicated. If we
  place `np.arange(6).reshape((3, 2))` using this layout, the individual
  components tensors would look like:

  ```
  Device  |  Component
   TPU:0     [[0, 1]]
   TPU:1     [[0, 1]]
   TPU:2     [[2, 3]]
   TPU:3     [[2, 3]]
   TPU:4     [[4, 5]]
   TPU:5     [[4, 5]]
  ```
  """
  def __init__(self, sharding_specs: List[str], mesh: Mesh) -> None:
    """Builds a Layout from a list of dimension names and a Mesh.

    Args:
      sharding_specs: List of sharding specifications, each corresponding to a
        tensor axis. Each specification (dim_sharding) can either be a mesh
        dimension or the special value UNSHARDED.
      mesh: A mesh configuration for the Tensor.

    Returns:
      A valid Layout built with given layout & mesh.
    """
    ...
  
  def __repr__(self) -> str:
    ...
  
  def __hash__(self) -> int:
    ...
  
  def __reduce__(self): # -> tuple[Callable[..., Layout], tuple[Any]]:
    ...
  
  @property
  def mesh(self):
    ...
  
  @property
  def shape(self):
    ...
  
  @classmethod
  def batch_sharded(cls, mesh: Mesh, batch_dim: str, rank: int, axis: int = ...) -> Layout:
    """Returns a layout sharded on batch dimension."""
    ...
  
  def delete(self, dims: List[int]) -> Layout:
    """Returns the layout with the give dimensions deleted."""
    ...
  
  @classmethod
  def from_proto(cls, layout_proto: layout_pb2.LayoutProto) -> Layout:
    """Creates an instance from a LayoutProto."""
    ...
  
  @classmethod
  def from_string(cls, layout_str: str) -> Layout:
    """Creates an instance from a human-readable string."""
    ...
  
  def to_parted(self) -> Layout:
    """Returns a "parted" layout from a static layout.

    A parted layout contains axes that are treated as independent by most of
    SPMD expanders.

    FIXME(b/285905569): The exact semantics is still being investigated.
    """
    ...
  
  @classmethod
  def inner_sharded(cls, mesh: Mesh, inner_dim: str, rank: int) -> Layout:
    """Returns a layout sharded on inner dimension."""
    ...
  
  @classmethod
  def from_single_device_mesh(cls, mesh: Mesh) -> Layout:
    """Constructs a single device layout from a single device mesh."""
    ...
  
  @classmethod
  def from_device(cls, device: str) -> Layout:
    """Constructs a single device layout from a single device mesh."""
    ...
  
  def offset_to_shard(self):
    """Mapping from offset in a flattened list to shard index."""
    ...
  
  def offset_tuple_to_global_index(self, offset_tuple): # -> Literal[0]:
    """Mapping from offset to index in global tensor."""
    ...
  
  @classmethod
  def replicated(cls, mesh: Mesh, rank: int) -> Layout:
    """Returns a replicated layout of rank `rank`."""
    ...
  


