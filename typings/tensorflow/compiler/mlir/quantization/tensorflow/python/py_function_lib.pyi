"""
This type stub file was generated by pyright.
"""

from typing import Optional, TypeVar
from tensorflow.compiler.mlir.quantization.tensorflow.python import pywrap_function_lib

"""Defines a wrapper class for overridden python method definitions."""
_ASSETS_DIR = ...
_ASSETS_EXTRA_DIR = ...
NotNoneT = TypeVar('NotNoneT')
class PyFunctionLibrary(pywrap_function_lib.PyFunctionLibrary):
  """Wrapper class for overridden python method definitions.

  This class contains python methods that overrides C++ virtual functions
  declared in `pywrap_function_lib.PyFunctionLibrary`.
  """
  def save_exported_model(self, dst_saved_model_path: str, exported_model_serialized: bytes, src_saved_model_path: str, tags: set[str], serialized_signature_def_map: dict[str, bytes]) -> Optional[bool]:
    """Saves `ExportedModel` to `dst_saved_model_path` as a SavedModel.

    Args:
      dst_saved_model_path: Destination path to save the exported model.
      exported_model_serialized: Exported model to export as SavedModel.
      src_saved_model_path: Path to the source SavedModel. This will be used to
        copy the asset files to `dst_saved_model_path`.
      tags: Tags to attach to the saved MetaGraphDef.
      serialized_signature_def_map: Signature key -> serialized SignatureDef.

    Returns:
      `True` upon successful execution. `None` when an error is raised
      internally.
    """
    ...
  
  def run_calibration(self, saved_model_path: str, signature_keys: list[str], tags: set[str], force_graph_mode_calibration: bool, representative_dataset_file_map_serialized: dict[str, bytes]) -> Optional[bool]:
    """Runs calibration and adds calibration statistics to exported model.

    Args:
      saved_model_path: Path to the SavedModel to run calibration.
      signature_keys: List of signature keys corresponding to SignatureDefs to
        run calibration on.
      tags: A set of tags that identify the MetaGraphDef.
      force_graph_mode_calibration: If True, runs the calibration in graph mode.
      representative_dataset_file_map_serialized: Signature key ->
        `RepresentativeDatasetFile` mapping for running the calibration step.
        Each dataset file stores the representative dataset for the function
        matching the signature key.

    Returns:
      The error message if the function raises and exception. `None` otherwise.
    """
    ...
  
  def get_calibration_min_max_value(self, calibration_statistics_serialized: bytes, calibration_options_serialized: bytes) -> Optional[tuple[float, float]]:
    """Calculates min and max values from statistics.

    Args:
      calibration_statistics_serialized: Serialized `CalibrationStatistics`.
        This will be the source to calculate min and max values from.
      calibration_options_serialized: Serialized `CalibrationOptions`. Specifies
        how the min / max should be calculated.

    Returns:
      (min_value, max_value): Min and max calculated using calib_opts. `None`
      upon error.
    """
    ...
  


