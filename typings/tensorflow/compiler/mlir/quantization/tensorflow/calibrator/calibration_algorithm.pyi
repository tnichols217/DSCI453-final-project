"""
This type stub file was generated by pyright.
"""

import abc
from tensorflow.compiler.mlir.quantization.stablehlo import quantization_config_pb2 as stablehlo_quant_config_pb2
from tensorflow.compiler.mlir.quantization.tensorflow.calibrator import calibration_statistics_pb2 as calib_stats_pb2

"""Defines CalibrationAlgorithm for calculating min and max values calculated by calibration method."""
_CalibrationMethod = ...
_REGISTRY = ...
class _CalibrationAlgorithmBase(abc.ABC):
  """Abstract base class for calibration algorithm."""
  def __init__(self, statistics: calib_stats_pb2.CalibrationStatistics, calib_opts: stablehlo_quant_config_pb2.CalibrationOptions) -> None:
    ...
  
  @abc.abstractmethod
  def get_min_max_value(self) -> tuple[float, float]:
    ...
  


class _HistogramCalibrationAlgorithmBase(_CalibrationAlgorithmBase):
  """Base class for histogram calibrators."""
  def __init__(self, statistics: calib_stats_pb2.CalibrationStatistics, calib_opts: stablehlo_quant_config_pb2.CalibrationOptions) -> None:
    """Builds histogram using statistics.histogram_statistics.

    lower_bound                                    hist_mid
         v                                            v
         |=========|=========|=========|=========|=========|
                    bin width

    Args:
      statistics: Collected calibration statistics.
      calib_opts: Calibration options used for calculating min and max.
    """
    ...
  


@_implements(_CalibrationMethod.CALIBRATION_METHOD_MIN_MAX)
class _MinMax(_CalibrationAlgorithmBase):
  """MinMaxCalibrationAlgorithm for calculating min and max values of calibration result.

  MinMax calibration calculates the global min and global max values.

  global min = min of given sample inputs
  global max = max of given sample inputs
  """
  def get_min_max_value(self) -> tuple[float, float]:
    """Calculates the global min and max values.

    Returns:
      (min_value, max_value): Min and max calculated using MinMax
    """
    ...
  


@_implements(_CalibrationMethod.CALIBRATION_METHOD_AVERAGE_MIN_MAX)
class _AverageMinMax(_CalibrationAlgorithmBase):
  """AverageMinMaxCalibrationAlgorithm for calculating min and max values of calibration result.

  AverageMinMax calibration calculates the average of min and max values.
  average of min = sum of min values / number of samples
  average of max = sum of max values / number of samples
  """
  def get_min_max_value(self) -> tuple[float, float]:
    """Calculates the average of min and max values.

    Returns:
      (min_value, max_value): Min and max calculated using AverageMinMax

    Raises:
      ValueError: num_samples is 0.
    """
    ...
  


@_implements(_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_PERCENTILE)
class _HistogramPercentile(_HistogramCalibrationAlgorithmBase):
  """HistogramPercentile for calculating min and max values of calibration result."""
  def get_min_max_value(self) -> tuple[float, float]:
    """Calculates min and max from statistics using calibration options.

    A "percentile" is a statistical concept that represents the value below
    which a given percentage of data falls in a dataset. It involves sorting the
    data from smallest to largest and then finding the value at a specified
    percentage position. For example, the 0.01 percentile represents the value
    in a given data set that corresponds to the lowest 0.01% of the data.

    HistogramPercentile calibration uses min_percentile and max_percentile to
    find min and max.

    min_percentile and max_percentile must be in range [0, 100].
    min_percentile is 0.001 by default.
    max_percentile is 99.999 by default.

    Returns:
      (min_value, max_value): Min and max calculated using HistogramPercentile
    """
    ...
  


@_implements(_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_BRUTEFORCE)
class _HistogramMseBruteforce(_HistogramCalibrationAlgorithmBase):
  """HistogramMseBruteforce for calculating min and max values of calibration result."""
  def get_min_max_value(self) -> tuple[float, float]:
    """Finds the optimal quant_min and quant_max by testing all possible cases.

    It guarantees optimal quant_min and quant_max for the representative
    dataset, but not for the test dataset.

    Returns:
      (min_value, max_value): Min and max calculated using
      HistogramMseBruteforce.
    """
    ...
  


@_implements(_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_MAX_FREQUENCY)
class _HistogramMseMaxFrequency(_HistogramCalibrationAlgorithmBase):
  """HistogramMseMaxFrequency for calculating min and max values of calibration result."""
  def get_min_max_value(self) -> tuple[float, float]:
    """Finds min and max starting from the index of the max frequency.

     The HistogramMseMaxFrequency method starts from the bin with the highest
     frequency and expands the range to both sides. This performs well when data
     is well spread on both sides of the max frequency.

    Returns:
      (min_value, max_value): Min and max calculated using method to expand the
      range based on max frequency.
    """
    ...
  


@_implements(_CalibrationMethod.CALIBRATION_METHOD_HISTOGRAM_MSE_SYMMETRIC)
class _HistogramMseSymmetric(_HistogramCalibrationAlgorithmBase):
  """HistogramMseSymmetric for calculating min and max values of calibration result."""
  def get_min_max_value(self) -> tuple[float, float]:
    """Finds min and max starting from the center index.

    The HistogramMseSymmetric method starts from the center bin and expands the
    range to both sides. This works better when the data is well-centered.

    Returns:
      (min_value, max_value): Min and max calculated using the method starting
      from center and expanding.
    """
    ...
  


def get_min_max_value(statistics: calib_stats_pb2.CalibrationStatistics, calib_opts: stablehlo_quant_config_pb2.CalibrationOptions) -> tuple[float, float]:
  """Calculates min and max from statistics using calibration options.

  Args:
    statistics: Collected calibration statistics.
    calib_opts: Calibration options used for calculating min and max.

  Returns:
    (min_value, max_value): Min and max calculated using calib_opts.

  Raises:
    ValueError: Unsupported calibration method is given.
  """
  ...

